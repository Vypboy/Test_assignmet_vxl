
Assignment_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800534c  0800534c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000007c  080053d0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080053d0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c2  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002811  00000000  00000000  00031567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00034b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a52  00000000  00000000  00035830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c78  00000000  00000000  0004e282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1d0  00000000  00000000  0005fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  000eb120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080052cc 	.word	0x080052cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080052cc 	.word	0x080052cc

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_f2iz>:
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b4c:	d30f      	bcc.n	8000b6e <__aeabi_f2iz+0x2a>
 8000b4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_f2iz+0x30>
 8000b58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b64:	fa23 f002 	lsr.w	r0, r3, r2
 8000b68:	bf18      	it	ne
 8000b6a:	4240      	negne	r0, r0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr
 8000b74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b78:	d101      	bne.n	8000b7e <__aeabi_f2iz+0x3a>
 8000b7a:	0242      	lsls	r2, r0, #9
 8000b7c:	d105      	bne.n	8000b8a <__aeabi_f2iz+0x46>
 8000b7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b82:	bf08      	it	eq
 8000b84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <Init>:
 */

#include <Device_Functions.h>
#include <stdio.h>

void Init(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	status_col=INIT;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <Init+0x1c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
	status_row=INIT;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <Init+0x20>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

	setTimerCol(10);
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f000 f991 	bl	8000ec8 <setTimerCol>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000e0 	.word	0x200000e0
 8000bb0:	200000e4 	.word	0x200000e4

08000bb4 <BlinkLed>:
//					FUNCTIONS FOR LEDS
/////////////////////////////////////////////////////////////////

//ham BkinkLed() de thuc hien nhap nhau 4 den cung mau trong trang thai MODE
int status1=0;
void BlinkLed(enum TypeLed L){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(timer5_flag==1){
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <BlinkLed+0x68>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d126      	bne.n	8000c14 <BlinkLed+0x60>
		setTimer5(250);
 8000bc6:	20fa      	movs	r0, #250	; 0xfa
 8000bc8:	f000 fa0a 	bl	8000fe0 <setTimer5>
		if(status1==1){
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <BlinkLed+0x6c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d117      	bne.n	8000c04 <BlinkLed+0x50>
			if(L == Red){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <BlinkLed+0x30>
				Display_Led_Red1();
 8000bda:	f000 f841 	bl	8000c60 <Display_Led_Red1>
				Display_Led_Red2();
 8000bde:	f000 f87b 	bl	8000cd8 <Display_Led_Red2>
 8000be2:	e011      	b.n	8000c08 <BlinkLed+0x54>
			}
			else if(L == Green){
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <BlinkLed+0x40>
				Display_Led_Green1();
 8000bea:	f000 f84d 	bl	8000c88 <Display_Led_Green1>
				Display_Led_Green2();
 8000bee:	f000 f883 	bl	8000cf8 <Display_Led_Green2>
 8000bf2:	e009      	b.n	8000c08 <BlinkLed+0x54>
			}
			else if(L == Yellow){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d106      	bne.n	8000c08 <BlinkLed+0x54>
				Display_Led_Yellow1();
 8000bfa:	f000 f859 	bl	8000cb0 <Display_Led_Yellow1>
				Display_Led_Yellow2();
 8000bfe:	f000 f88b 	bl	8000d18 <Display_Led_Yellow2>
 8000c02:	e001      	b.n	8000c08 <BlinkLed+0x54>
			}
		}
		else{
			Display_Init();
 8000c04:	f000 f80e 	bl	8000c24 <Display_Init>
		}
		status1=1 - status1;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <BlinkLed+0x6c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1c3 0301 	rsb	r3, r3, #1
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <BlinkLed+0x6c>)
 8000c12:	6013      	str	r3, [r2, #0]
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000c8 	.word	0x200000c8
 8000c20:	20000098 	.word	0x20000098

08000c24 <Display_Init>:


void Display_Init(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <Display_Init+0x34>)
 8000c30:	f001 fe17 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2108      	movs	r1, #8
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <Display_Init+0x38>)
 8000c3a:	f001 fe12 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <Display_Init+0x38>)
 8000c44:	f001 fe0d 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <Display_Init+0x38>)
 8000c4e:	f001 fe08 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <Display_Led_Red1>:


void Display_Led_Red1(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <Display_Led_Red1+0x20>)
 8000c6c:	f001 fdf9 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2108      	movs	r1, #8
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <Display_Led_Red1+0x24>)
 8000c76:	f001 fdf4 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <Display_Led_Green1>:
void Display_Led_Green1(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <Display_Led_Green1+0x20>)
 8000c94:	f001 fde5 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <Display_Led_Green1+0x24>)
 8000c9e:	f001 fde0 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00

08000cb0 <Display_Led_Yellow1>:
void Display_Led_Yellow1(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <Display_Led_Yellow1+0x20>)
 8000cbc:	f001 fdd1 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <Display_Led_Yellow1+0x24>)
 8000cc6:	f001 fdcc 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <Display_Led_Red2>:

void Display_Led_Red2(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <Display_Led_Red2+0x1c>)
 8000ce2:	f001 fdbe 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <Display_Led_Red2+0x1c>)
 8000cec:	f001 fdb9 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <Display_Led_Green2>:
void Display_Led_Green2(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <Display_Led_Green2+0x1c>)
 8000d02:	f001 fdae 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4802      	ldr	r0, [pc, #8]	; (8000d14 <Display_Led_Green2+0x1c>)
 8000d0c:	f001 fda9 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <Display_Led_Yellow2>:
void Display_Led_Yellow2(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2120      	movs	r1, #32
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <Display_Led_Yellow2+0x1c>)
 8000d22:	f001 fd9e 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4802      	ldr	r0, [pc, #8]	; (8000d34 <Display_Led_Yellow2+0x1c>)
 8000d2c:	f001 fd99 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <Display_P_Led_Red1>:


void Display_P_Led_Red1(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <Display_P_Led_Red1+0x20>)
 8000d44:	f001 fd8d 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <Display_P_Led_Red1+0x24>)
 8000d50:	f001 fd87 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00
 8000d5c:	40010800 	.word	0x40010800

08000d60 <Display_P_Led_Green1>:
void Display_P_Led_Green1(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <Display_P_Led_Green1+0x20>)
 8000d6c:	f001 fd79 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <Display_P_Led_Green1+0x24>)
 8000d78:	f001 fd73 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40010800 	.word	0x40010800

08000d88 <Display_P_Led_Reset>:

void Display_P_Led_Reset(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED1_GPIO_Port, P_LED1_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <Display_P_Led_Reset+0x20>)
 8000d94:	f001 fd65 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED2_GPIO_Port, P_LED2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <Display_P_Led_Reset+0x24>)
 8000da0:	f001 fd5f 	bl	8002862 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010800 	.word	0x40010800

08000db0 <Buzzer>:

/////////////////////////////////////////////////////////////////
//					FUNCTIONS FOR BUZZER
/////////////////////////////////////////////////////////////////

void Buzzer(int intensity){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, intensity);
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <Buzzer+0x20>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
	setBuzzerLength(200);
 8000dc0:	20c8      	movs	r0, #200	; 0xc8
 8000dc2:	f000 f845 	bl	8000e50 <setBuzzerLength>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000178 	.word	0x20000178

08000dd4 <Buzzer_Off>:

void Buzzer_Off(){
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <Buzzer_Off+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	20000178 	.word	0x20000178

08000dec <uart_run>:

/////////////////////////////////////////////////////////////////
//					FUNCTIONS FOR UART
/////////////////////////////////////////////////////////////////
char str[20];
void uart_run(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(timerUart_flag==1){
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <uart_run+0x4c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d11d      	bne.n	8000e34 <uart_run+0x48>
		setTimerUart(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfc:	f000 f8b8 	bl	8000f70 <setTimerUart>
		time_value--;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <uart_run+0x50>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <uart_run+0x50>)
 8000e08:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str,"!7SEG:%2d#\n",time_value/1000), 1000);
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <uart_run+0x50>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <uart_run+0x54>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1192      	asrs	r2, r2, #6
 8000e16:	17db      	asrs	r3, r3, #31
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <uart_run+0x58>)
 8000e1e:	480a      	ldr	r0, [pc, #40]	; (8000e48 <uart_run+0x5c>)
 8000e20:	f003 fe1a 	bl	8004a58 <siprintf>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <uart_run+0x5c>)
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <uart_run+0x60>)
 8000e30:	f003 f8f5 	bl	800401e <HAL_UART_Transmit>
	}
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000b8 	.word	0x200000b8
 8000e3c:	200000f0 	.word	0x200000f0
 8000e40:	10624dd3 	.word	0x10624dd3
 8000e44:	080052e4 	.word	0x080052e4
 8000e48:	20000104 	.word	0x20000104
 8000e4c:	20000228 	.word	0x20000228

08000e50 <setBuzzerLength>:

int buzzerLength_flag = 0;
int buzzerLength_counter = 0;
int buzzerActive_flag = 0;

void setBuzzerLength(int duration){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	buzzerLength_counter = duration/TICK;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <setBuzzerLength+0x30>)
 8000e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e60:	1092      	asrs	r2, r2, #2
 8000e62:	17db      	asrs	r3, r3, #31
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <setBuzzerLength+0x34>)
 8000e68:	6013      	str	r3, [r2, #0]
	buzzerLength_flag = 0;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <setBuzzerLength+0x38>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	buzzerActive_flag = 0;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <setBuzzerLength+0x3c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	66666667 	.word	0x66666667
 8000e84:	200000d8 	.word	0x200000d8
 8000e88:	200000d4 	.word	0x200000d4
 8000e8c:	200000dc 	.word	0x200000dc

08000e90 <setTimerBuzzer>:

void setTimerBuzzer(int duration){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	timerBuzzer_counter = duration/TICK;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <setTimerBuzzer+0x2c>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1092      	asrs	r2, r2, #2
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <setTimerBuzzer+0x30>)
 8000ea8:	6013      	str	r3, [r2, #0]
	timerBuzzer_flag = 0;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <setTimerBuzzer+0x34>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	66666667 	.word	0x66666667
 8000ec0:	200000cc 	.word	0x200000cc
 8000ec4:	200000d0 	.word	0x200000d0

08000ec8 <setTimerCol>:

void setTimerCol(int duration){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	timerCol_counter = duration/TICK;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <setTimerCol+0x2c>)
 8000ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed8:	1092      	asrs	r2, r2, #2
 8000eda:	17db      	asrs	r3, r3, #31
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <setTimerCol+0x30>)
 8000ee0:	6013      	str	r3, [r2, #0]
	timerCol_flag = 0;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <setTimerCol+0x34>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	66666667 	.word	0x66666667
 8000ef8:	2000009c 	.word	0x2000009c
 8000efc:	200000a0 	.word	0x200000a0

08000f00 <setTimer2>:

void setTimer2(int duration){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <setTimer2+0x2c>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1092      	asrs	r2, r2, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <setTimer2+0x30>)
 8000f18:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <setTimer2+0x34>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	66666667 	.word	0x66666667
 8000f30:	200000a4 	.word	0x200000a4
 8000f34:	200000a8 	.word	0x200000a8

08000f38 <setTimer3>:

void setTimer3(int duration){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <setTimer3+0x2c>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1092      	asrs	r2, r2, #2
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <setTimer3+0x30>)
 8000f50:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <setTimer3+0x34>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	66666667 	.word	0x66666667
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	200000b0 	.word	0x200000b0

08000f70 <setTimerUart>:

void setTimerUart(int duration){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	timerUart_counter = duration/TICK;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <setTimerUart+0x2c>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	1092      	asrs	r2, r2, #2
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <setTimerUart+0x30>)
 8000f88:	6013      	str	r3, [r2, #0]
	timerUart_flag = 0;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <setTimerUart+0x34>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	66666667 	.word	0x66666667
 8000fa0:	200000b4 	.word	0x200000b4
 8000fa4:	200000b8 	.word	0x200000b8

08000fa8 <setTimerRow>:

void setTimerRow(int duration){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	timerRow_counter = duration/TICK;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <setTimerRow+0x2c>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1092      	asrs	r2, r2, #2
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <setTimerRow+0x30>)
 8000fc0:	6013      	str	r3, [r2, #0]
	timerRow_flag = 0;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <setTimerRow+0x34>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	200000bc 	.word	0x200000bc
 8000fdc:	200000c0 	.word	0x200000c0

08000fe0 <setTimer5>:

void setTimer5(int duration){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <setTimer5+0x2c>)
 8000fec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff0:	1092      	asrs	r2, r2, #2
 8000ff2:	17db      	asrs	r3, r3, #31
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <setTimer5+0x30>)
 8000ff8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <setTimer5+0x34>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	66666667 	.word	0x66666667
 8001010:	200000c4 	.word	0x200000c4
 8001014:	200000c8 	.word	0x200000c8

08001018 <timerRun>:



void timerRun(){
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	if(buzzerLength_counter > 0){
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <timerRun+0x11c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd12      	ble.n	800104a <timerRun+0x32>
		buzzerLength_counter--;
 8001024:	4b43      	ldr	r3, [pc, #268]	; (8001134 <timerRun+0x11c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <timerRun+0x11c>)
 800102c:	6013      	str	r3, [r2, #0]
		if(buzzerLength_counter <= 10){
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <timerRun+0x11c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0a      	cmp	r3, #10
 8001034:	dc02      	bgt.n	800103c <timerRun+0x24>
			buzzerActive_flag = 1;
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <timerRun+0x120>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
		}
		if(buzzerLength_counter == 0){
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <timerRun+0x11c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <timerRun+0x32>
			buzzerLength_flag = 1;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <timerRun+0x124>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerCol_counter > 0){
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <timerRun+0x128>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	dd0b      	ble.n	800106a <timerRun+0x52>
		timerCol_counter--;
 8001052:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <timerRun+0x128>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	4a39      	ldr	r2, [pc, #228]	; (8001140 <timerRun+0x128>)
 800105a:	6013      	str	r3, [r2, #0]
		if(timerCol_counter == 0){
 800105c:	4b38      	ldr	r3, [pc, #224]	; (8001140 <timerRun+0x128>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <timerRun+0x52>
			timerCol_flag = 1;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <timerRun+0x12c>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <timerRun+0x130>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd0b      	ble.n	800108a <timerRun+0x72>
		timer2_counter--;
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <timerRun+0x130>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <timerRun+0x130>)
 800107a:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <timerRun+0x130>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <timerRun+0x72>
			timer2_flag = 1;
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <timerRun+0x134>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <timerRun+0x138>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd0b      	ble.n	80010aa <timerRun+0x92>
		timer3_counter--;
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <timerRun+0x138>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <timerRun+0x138>)
 800109a:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <timerRun+0x138>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <timerRun+0x92>
			timer3_flag = 1;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <timerRun+0x13c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerUart_counter > 0){
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <timerRun+0x140>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd0b      	ble.n	80010ca <timerRun+0xb2>
		timerUart_counter--;
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <timerRun+0x140>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <timerRun+0x140>)
 80010ba:	6013      	str	r3, [r2, #0]
		if(timerUart_counter == 0){
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <timerRun+0x140>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <timerRun+0xb2>
			timerUart_flag = 1;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <timerRun+0x144>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerRow_counter > 0){
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <timerRun+0x148>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd0b      	ble.n	80010ea <timerRun+0xd2>
		timerRow_counter--;
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <timerRun+0x148>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <timerRun+0x148>)
 80010da:	6013      	str	r3, [r2, #0]
		if(timerRow_counter == 0){
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <timerRun+0x148>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <timerRun+0xd2>
			timerRow_flag = 1;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <timerRun+0x14c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <timerRun+0x150>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd0b      	ble.n	800110a <timerRun+0xf2>
		timer5_counter--;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <timerRun+0x150>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <timerRun+0x150>)
 80010fa:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <timerRun+0x150>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <timerRun+0xf2>
			timer5_flag = 1;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <timerRun+0x154>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerBuzzer_counter > 0){
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <timerRun+0x158>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dd0b      	ble.n	800112a <timerRun+0x112>
		timerBuzzer_counter--;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <timerRun+0x158>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <timerRun+0x158>)
 800111a:	6013      	str	r3, [r2, #0]
		if(timerBuzzer_counter == 0){
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <timerRun+0x158>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <timerRun+0x112>
			timerBuzzer_flag = 1;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <timerRun+0x15c>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
		}
	}

}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200000d8 	.word	0x200000d8
 8001138:	200000dc 	.word	0x200000dc
 800113c:	200000d4 	.word	0x200000d4
 8001140:	2000009c 	.word	0x2000009c
 8001144:	200000a0 	.word	0x200000a0
 8001148:	200000a4 	.word	0x200000a4
 800114c:	200000a8 	.word	0x200000a8
 8001150:	200000ac 	.word	0x200000ac
 8001154:	200000b0 	.word	0x200000b0
 8001158:	200000b4 	.word	0x200000b4
 800115c:	200000b8 	.word	0x200000b8
 8001160:	200000bc 	.word	0x200000bc
 8001164:	200000c0 	.word	0x200000c0
 8001168:	200000c4 	.word	0x200000c4
 800116c:	200000c8 	.word	0x200000c8
 8001170:	200000cc 	.word	0x200000cc
 8001174:	200000d0 	.word	0x200000d0

08001178 <ReadButton>:
#include "button.h"
#include "main.h"

//add more case if you have more buttons
int ReadButton(int i){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d822      	bhi.n	80011cc <ReadButton+0x54>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <ReadButton+0x14>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011a9 	.word	0x080011a9
 8001194:	080011b5 	.word	0x080011b5
 8001198:	080011c1 	.word	0x080011c1
	switch(i){
		case 0:
			return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800119c:	2102      	movs	r1, #2
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <ReadButton+0x60>)
 80011a0:	f001 fb48 	bl	8002834 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	e013      	b.n	80011d0 <ReadButton+0x58>
		case 1:
			return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80011a8:	2110      	movs	r1, #16
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <ReadButton+0x60>)
 80011ac:	f001 fb42 	bl	8002834 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	e00d      	b.n	80011d0 <ReadButton+0x58>
		case 2:
			return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80011b4:	2101      	movs	r1, #1
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <ReadButton+0x64>)
 80011b8:	f001 fb3c 	bl	8002834 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	e007      	b.n	80011d0 <ReadButton+0x58>
		case 3:
			return HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80011c0:	2101      	movs	r1, #1
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <ReadButton+0x60>)
 80011c4:	f001 fb36 	bl	8002834 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	e001      	b.n	80011d0 <ReadButton+0x58>
		default:
			break;
 80011cc:	bf00      	nop
	}
	return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <subKeyProcess>:
		KeyReg3[i]= NORMAL_STATE;
		TimeForKeyPress[i]= 200;
	}
}

void subKeyProcess(int i){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	button_flag[i]=1;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <subKeyProcess+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2101      	movs	r1, #1
 80011ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000148 	.word	0x20000148

08001200 <isButtonPressed>:

int isButtonPressed(int i){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if(button_flag[i]==1){
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <isButtonPressed+0x30>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <isButtonPressed+0x22>
		button_flag[i]=0;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <isButtonPressed+0x30>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2100      	movs	r1, #0
 800121a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <isButtonPressed+0x24>
	}
	return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000148 	.word	0x20000148

08001234 <getKeyInput>:


void getKeyInput(){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e063      	b.n	8001308 <getKeyInput+0xd4>
		KeyReg0[i]= KeyReg1[i];
 8001240:	4a35      	ldr	r2, [pc, #212]	; (8001318 <getKeyInput+0xe4>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001248:	4934      	ldr	r1, [pc, #208]	; (800131c <getKeyInput+0xe8>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i]= KeyReg2[i];
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <getKeyInput+0xec>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001258:	492f      	ldr	r1, [pc, #188]	; (8001318 <getKeyInput+0xe4>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i]= ReadButton(i);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff89 	bl	8001178 <ReadButton>
 8001266:	4602      	mov	r2, r0
 8001268:	492d      	ldr	r1, [pc, #180]	; (8001320 <getKeyInput+0xec>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8001270:	4a29      	ldr	r2, [pc, #164]	; (8001318 <getKeyInput+0xe4>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001278:	4928      	ldr	r1, [pc, #160]	; (800131c <getKeyInput+0xe8>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001280:	429a      	cmp	r2, r3
 8001282:	d13e      	bne.n	8001302 <getKeyInput+0xce>
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <getKeyInput+0xe4>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128c:	4924      	ldr	r1, [pc, #144]	; (8001320 <getKeyInput+0xec>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001294:	429a      	cmp	r2, r3
 8001296:	d134      	bne.n	8001302 <getKeyInput+0xce>
			if (KeyReg3[i] != KeyReg2[i]){
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <getKeyInput+0xf0>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a0:	491f      	ldr	r1, [pc, #124]	; (8001320 <getKeyInput+0xec>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d016      	beq.n	80012da <getKeyInput+0xa6>
			  KeyReg3[i] = KeyReg2[i];
 80012ac:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <getKeyInput+0xec>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b4:	491b      	ldr	r1, [pc, #108]	; (8001324 <getKeyInput+0xf0>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <getKeyInput+0xec>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11c      	bne.n	8001302 <getKeyInput+0xce>
				  TimeForKeyPress[i] = 200;
 80012c8:	4a17      	ldr	r2, [pc, #92]	; (8001328 <getKeyInput+0xf4>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	21c8      	movs	r1, #200	; 0xc8
 80012ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  //TODO
				  subKeyProcess(i);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff84 	bl	80011e0 <subKeyProcess>
 80012d8:	e013      	b.n	8001302 <getKeyInput+0xce>
			  }
			} else {
				TimeForKeyPress[i]--;
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <getKeyInput+0xf4>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	4910      	ldr	r1, [pc, #64]	; (8001328 <getKeyInput+0xf4>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeForKeyPress[i] == 0){
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <getKeyInput+0xf4>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d104      	bne.n	8001302 <getKeyInput+0xce>
					//TODO
					KeyReg3[i]= NORMAL_STATE;
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <getKeyInput+0xf0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2101      	movs	r1, #1
 80012fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS ; i++) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3301      	adds	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	dd98      	ble.n	8001240 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000138 	.word	0x20000138
 800131c:	20000128 	.word	0x20000128
 8001320:	20000158 	.word	0x20000158
 8001324:	20000118 	.word	0x20000118
 8001328:	20000168 	.word	0x20000168

0800132c <press_ped_lag>:
#include "fsm_automatic.h"


void press_ped_lag(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	flag_pad=1;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <press_ped_lag+0x20>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
	cycle_pad = 0;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <press_ped_lag+0x24>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
	setTimerBuzzer(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f7ff fda7 	bl	8000e90 <setTimerBuzzer>
	setBuzzerLength(10);
 8001342:	200a      	movs	r0, #10
 8001344:	f7ff fd84 	bl	8000e50 <setBuzzerLength>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000e8 	.word	0x200000e8
 8001350:	200000ec 	.word	0x200000ec

08001354 <reset_pad_led>:
void reset_pad_led(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	flag_pad=0;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <reset_pad_led+0x18>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	cycle_pad=0;
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <reset_pad_led+0x1c>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
	Display_P_Led_Reset();
 8001364:	f7ff fd10 	bl	8000d88 <Display_P_Led_Reset>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000e8 	.word	0x200000e8
 8001370:	200000ec 	.word	0x200000ec
 8001374:	00000000 	.word	0x00000000

08001378 <fsm_automatic_run>:

void fsm_automatic_run(){
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	//quan ly den tin hieu hang doc
	switch(status_col){
 800137e:	4bba      	ldr	r3, [pc, #744]	; (8001668 <fsm_automatic_run+0x2f0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	2b03      	cmp	r3, #3
 8001386:	f200 808b 	bhi.w	80014a0 <fsm_automatic_run+0x128>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <fsm_automatic_run+0x18>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013b7 	.word	0x080013b7
 8001398:	08001405 	.word	0x08001405
 800139c:	08001453 	.word	0x08001453
		case INIT:
			Display_Init();
 80013a0:	f7ff fc40 	bl	8000c24 <Display_Init>
			//chuyen trang thai ko dk
			status_col=AUTO_RED;
 80013a4:	4bb0      	ldr	r3, [pc, #704]	; (8001668 <fsm_automatic_run+0x2f0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	601a      	str	r2, [r3, #0]
			setTimerCol(Time_Auto_Red);
 80013aa:	4bb0      	ldr	r3, [pc, #704]	; (800166c <fsm_automatic_run+0x2f4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd8a 	bl	8000ec8 <setTimerCol>
			//dat gia tri bien dem time_value de hien thi tren terminal
			break;
 80013b4:	e07b      	b.n	80014ae <fsm_automatic_run+0x136>
		case AUTO_RED:
			Display_Led_Red1();
 80013b6:	f7ff fc53 	bl	8000c60 <Display_Led_Red1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 80013ba:	4bad      	ldr	r3, [pc, #692]	; (8001670 <fsm_automatic_run+0x2f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <fsm_automatic_run+0x5a>
				status_col=AUTO_GREEN;
 80013c2:	4ba9      	ldr	r3, [pc, #676]	; (8001668 <fsm_automatic_run+0x2f0>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Green);
 80013c8:	4baa      	ldr	r3, [pc, #680]	; (8001674 <fsm_automatic_run+0x2fc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fd7b 	bl	8000ec8 <setTimerCol>
			}
			//trang thai mode 2
			if(isButtonPressed(0)==1){
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff14 	bl	8001200 <isButtonPressed>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d109      	bne.n	80013f2 <fsm_automatic_run+0x7a>
				status_col=MAN_RED;
 80013de:	4ba2      	ldr	r3, [pc, #648]	; (8001668 <fsm_automatic_run+0x2f0>)
 80013e0:	220c      	movs	r2, #12
 80013e2:	601a      	str	r2, [r3, #0]
				status_row=MAN_RED;
 80013e4:	4ba4      	ldr	r3, [pc, #656]	; (8001678 <fsm_automatic_run+0x300>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 80013ea:	f643 2098 	movw	r0, #15000	; 0x3a98
 80013ee:	f7ff fd6b 	bl	8000ec8 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 80013f2:	2003      	movs	r0, #3
 80013f4:	f7ff ff04 	bl	8001200 <isButtonPressed>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d152      	bne.n	80014a4 <fsm_automatic_run+0x12c>
				press_ped_lag();
 80013fe:	f7ff ff95 	bl	800132c <press_ped_lag>
			}
			break;
 8001402:	e04f      	b.n	80014a4 <fsm_automatic_run+0x12c>
		case AUTO_GREEN:
			Display_Led_Green1();
 8001404:	f7ff fc40 	bl	8000c88 <Display_Led_Green1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 8001408:	4b99      	ldr	r3, [pc, #612]	; (8001670 <fsm_automatic_run+0x2f8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <fsm_automatic_run+0xa8>
				status_col=AUTO_YELLOW;
 8001410:	4b95      	ldr	r3, [pc, #596]	; (8001668 <fsm_automatic_run+0x2f0>)
 8001412:	2204      	movs	r2, #4
 8001414:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Yellow);
 8001416:	4b99      	ldr	r3, [pc, #612]	; (800167c <fsm_automatic_run+0x304>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fd54 	bl	8000ec8 <setTimerCol>
			}
			if(isButtonPressed(0)==1){
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff feed 	bl	8001200 <isButtonPressed>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d109      	bne.n	8001440 <fsm_automatic_run+0xc8>
				status_col=MAN_GREEN;
 800142c:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <fsm_automatic_run+0x2f0>)
 800142e:	220d      	movs	r2, #13
 8001430:	601a      	str	r2, [r3, #0]
				status_row=MAN_GREEN;
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <fsm_automatic_run+0x300>)
 8001434:	220d      	movs	r2, #13
 8001436:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8001438:	f643 2098 	movw	r0, #15000	; 0x3a98
 800143c:	f7ff fd44 	bl	8000ec8 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 8001440:	2003      	movs	r0, #3
 8001442:	f7ff fedd 	bl	8001200 <isButtonPressed>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d12d      	bne.n	80014a8 <fsm_automatic_run+0x130>
				press_ped_lag();
 800144c:	f7ff ff6e 	bl	800132c <press_ped_lag>
			}
			break;
 8001450:	e02a      	b.n	80014a8 <fsm_automatic_run+0x130>
		case AUTO_YELLOW:
			Display_Led_Yellow1();
 8001452:	f7ff fc2d 	bl	8000cb0 <Display_Led_Yellow1>

			//chuyen trang thai co dk
			if(timerCol_flag==1){
 8001456:	4b86      	ldr	r3, [pc, #536]	; (8001670 <fsm_automatic_run+0x2f8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <fsm_automatic_run+0xf6>
				status_col=AUTO_RED;
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <fsm_automatic_run+0x2f0>)
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
				setTimerCol(Time_Auto_Red);
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <fsm_automatic_run+0x2f4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd2d 	bl	8000ec8 <setTimerCol>
			}
			if(isButtonPressed(0)==1){
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fec6 	bl	8001200 <isButtonPressed>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d109      	bne.n	800148e <fsm_automatic_run+0x116>
				status_col=MAN_YELLOW;
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <fsm_automatic_run+0x2f0>)
 800147c:	220e      	movs	r2, #14
 800147e:	601a      	str	r2, [r3, #0]
				status_row=MAN_YELLOW;
 8001480:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <fsm_automatic_run+0x300>)
 8001482:	220e      	movs	r2, #14
 8001484:	601a      	str	r2, [r3, #0]

				setTimerCol(MODE_TIME);
 8001486:	f643 2098 	movw	r0, #15000	; 0x3a98
 800148a:	f7ff fd1d 	bl	8000ec8 <setTimerCol>
			}
			if(isButtonPressed(3)==1){
 800148e:	2003      	movs	r0, #3
 8001490:	f7ff feb6 	bl	8001200 <isButtonPressed>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <fsm_automatic_run+0x134>
				press_ped_lag();
 800149a:	f7ff ff47 	bl	800132c <press_ped_lag>
			}
			break;
 800149e:	e005      	b.n	80014ac <fsm_automatic_run+0x134>
		default:
			break;
 80014a0:	bf00      	nop
 80014a2:	e004      	b.n	80014ae <fsm_automatic_run+0x136>
			break;
 80014a4:	bf00      	nop
 80014a6:	e002      	b.n	80014ae <fsm_automatic_run+0x136>
			break;
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <fsm_automatic_run+0x136>
			break;
 80014ac:	bf00      	nop
	}
///////////////////////////////////////////////////////////////////////
	//quan ly den tin hieu hang ngang
	switch(status_row){
 80014ae:	4b72      	ldr	r3, [pc, #456]	; (8001678 <fsm_automatic_run+0x300>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	f200 80cd 	bhi.w	8001654 <fsm_automatic_run+0x2dc>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <fsm_automatic_run+0x148>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	08001533 	.word	0x08001533
 80014cc:	08001621 	.word	0x08001621
		case INIT:
			Display_Init();
 80014d0:	f7ff fba8 	bl	8000c24 <Display_Init>

			//chuyen trang thai ko dk
			status_row=AUTO_GREEN;
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <fsm_automatic_run+0x300>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	601a      	str	r2, [r3, #0]
			setTimerRow(Time_Auto_Green);
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <fsm_automatic_run+0x2fc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fd62 	bl	8000fa8 <setTimerRow>
			//dat gia tri bien dem time_value de hien thi tren terminal
			set_time_value(Time_Auto_Red);
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <fsm_automatic_run+0x2f4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f997 	bl	800181c <set_time_value>
			break;
 80014ee:	e0d8      	b.n	80016a2 <fsm_automatic_run+0x32a>
		case AUTO_RED:
			if(flag_pad==1) Display_P_Led_Red1();
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <fsm_automatic_run+0x308>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <fsm_automatic_run+0x184>
 80014f8:	f7ff fc1e 	bl	8000d38 <Display_P_Led_Red1>
			Display_Led_Red2();
 80014fc:	f7ff fbec 	bl	8000cd8 <Display_Led_Red2>
//			Buzzer_Off();
			//chuyen trang thai co dk
			if(timerRow_flag==1){
 8001500:	4b60      	ldr	r3, [pc, #384]	; (8001684 <fsm_automatic_run+0x30c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 80a7 	bne.w	8001658 <fsm_automatic_run+0x2e0>
				status_row=AUTO_GREEN;
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <fsm_automatic_run+0x300>)
 800150c:	2203      	movs	r2, #3
 800150e:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Green);
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <fsm_automatic_run+0x2fc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd47 	bl	8000fa8 <setTimerRow>
				setTimerBuzzer(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f7ff fcb8 	bl	8000e90 <setTimerBuzzer>
				setBuzzerLength(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f7ff fc95 	bl	8000e50 <setBuzzerLength>
				//dat gia tri bien dem time_value de hien thi tren terminal
				set_time_value(Time_Auto_Green);
 8001526:	4b53      	ldr	r3, [pc, #332]	; (8001674 <fsm_automatic_run+0x2fc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f976 	bl	800181c <set_time_value>
			}
			break;
 8001530:	e092      	b.n	8001658 <fsm_automatic_run+0x2e0>
		case AUTO_GREEN:
			if(flag_pad==1) {
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <fsm_automatic_run+0x308>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d152      	bne.n	80015e0 <fsm_automatic_run+0x268>
				Display_P_Led_Green1();
 800153a:	f7ff fc11 	bl	8000d60 <Display_P_Led_Green1>
				//thuc hien buzzer
				if (timerBuzzer_flag == 1){
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <fsm_automatic_run+0x310>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d14c      	bne.n	80015e0 <fsm_automatic_run+0x268>
					float per = (float)(time_value * 1.0 / Time_Auto_Green);
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <fsm_automatic_run+0x314>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f806 	bl	800055c <__aeabi_i2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <fsm_automatic_run+0x2fc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffff 	bl	800055c <__aeabi_i2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f98d 	bl	8000884 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fa97 	bl	8000aa4 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	607b      	str	r3, [r7, #4]
					setTimerBuzzer((int)(0.15 * Time_Auto_Green * per));
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <fsm_automatic_run+0x2fc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffec 	bl	800055c <__aeabi_i2d>
 8001584:	a336      	add	r3, pc, #216	; (adr r3, 8001660 <fsm_automatic_run+0x2e8>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f851 	bl	8000630 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4614      	mov	r4, r2
 8001594:	461d      	mov	r5, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe fff2 	bl	8000580 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f844 	bl	8000630 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa50 	bl	8000a54 <__aeabi_d2iz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fc6a 	bl	8000e90 <setTimerBuzzer>
					if (buzzerLength_flag == 1){
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <fsm_automatic_run+0x318>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10d      	bne.n	80015e0 <fsm_automatic_run+0x268>
						Buzzer(300 - (int)(250 * per));
 80015c4:	4933      	ldr	r1, [pc, #204]	; (8001694 <fsm_automatic_run+0x31c>)
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7fe fdc2 	bl	8000150 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fab8 	bl	8000b44 <__aeabi_f2iz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbe8 	bl	8000db0 <Buzzer>
					}
				}
			}
			Display_Led_Green2();
 80015e0:	f7ff fb8a 	bl	8000cf8 <Display_Led_Green2>

			//chuyen trang thai co dk
			if(timerRow_flag==1){
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <fsm_automatic_run+0x30c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d157      	bne.n	800169c <fsm_automatic_run+0x324>
				if (cycle_pad >= 1){
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <fsm_automatic_run+0x320>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dd02      	ble.n	80015fa <fsm_automatic_run+0x282>
					reset_pad_led();//tat den cho nguoi di duong
 80015f4:	f7ff feae 	bl	8001354 <reset_pad_led>
 80015f8:	e004      	b.n	8001604 <fsm_automatic_run+0x28c>
				}
				else cycle_pad++;
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <fsm_automatic_run+0x320>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <fsm_automatic_run+0x320>)
 8001602:	6013      	str	r3, [r2, #0]
				status_row=AUTO_YELLOW;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <fsm_automatic_run+0x300>)
 8001606:	2204      	movs	r2, #4
 8001608:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Yellow);
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <fsm_automatic_run+0x304>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fcca 	bl	8000fa8 <setTimerRow>
				//dat gia tri bien dem time_value de hien thi tren terminal
				set_time_value(Time_Auto_Yellow);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <fsm_automatic_run+0x304>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f8ff 	bl	800181c <set_time_value>
			}
			break;
 800161e:	e03d      	b.n	800169c <fsm_automatic_run+0x324>
		case AUTO_YELLOW:
			Display_Led_Yellow2();
 8001620:	f7ff fb7a 	bl	8000d18 <Display_Led_Yellow2>
			if(flag_pad==1) Display_P_Led_Red1();
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <fsm_automatic_run+0x308>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <fsm_automatic_run+0x2b8>
 800162c:	f7ff fb84 	bl	8000d38 <Display_P_Led_Red1>
//			Buzzer_Off();
			//chuyen trang thai co dk
			if(timerRow_flag==1){
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <fsm_automatic_run+0x30c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d133      	bne.n	80016a0 <fsm_automatic_run+0x328>
				status_row=AUTO_RED;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <fsm_automatic_run+0x300>)
 800163a:	2202      	movs	r2, #2
 800163c:	601a      	str	r2, [r3, #0]
				setTimerRow(Time_Auto_Red);
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <fsm_automatic_run+0x2f4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fcb0 	bl	8000fa8 <setTimerRow>
				set_time_value(Time_Auto_Red);
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <fsm_automatic_run+0x2f4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f8e5 	bl	800181c <set_time_value>
			}
			break;
 8001652:	e025      	b.n	80016a0 <fsm_automatic_run+0x328>
		default:
			break;
 8001654:	bf00      	nop
 8001656:	e024      	b.n	80016a2 <fsm_automatic_run+0x32a>
			break;
 8001658:	bf00      	nop
 800165a:	e022      	b.n	80016a2 <fsm_automatic_run+0x32a>
 800165c:	f3af 8000 	nop.w
 8001660:	33333333 	.word	0x33333333
 8001664:	3fc33333 	.word	0x3fc33333
 8001668:	200000e0 	.word	0x200000e0
 800166c:	20000000 	.word	0x20000000
 8001670:	200000a0 	.word	0x200000a0
 8001674:	20000004 	.word	0x20000004
 8001678:	200000e4 	.word	0x200000e4
 800167c:	20000008 	.word	0x20000008
 8001680:	200000e8 	.word	0x200000e8
 8001684:	200000c0 	.word	0x200000c0
 8001688:	200000d0 	.word	0x200000d0
 800168c:	200000f0 	.word	0x200000f0
 8001690:	200000d4 	.word	0x200000d4
 8001694:	437a0000 	.word	0x437a0000
 8001698:	200000ec 	.word	0x200000ec
			break;
 800169c:	bf00      	nop
 800169e:	e000      	b.n	80016a2 <fsm_automatic_run+0x32a>
			break;
 80016a0:	bf00      	nop
	}
	run_time_value();
 80016a2:	f000 f8c9 	bl	8001838 <run_time_value>
	if (buzzerActive_flag == 1){
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <fsm_automatic_run+0x344>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <fsm_automatic_run+0x33a>
		Buzzer_Off();
 80016ae:	f7ff fb91 	bl	8000dd4 <Buzzer_Off>
	}
	///////////////////////////////////////////////////////////////////

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000dc 	.word	0x200000dc

080016c0 <fsm_manual_run>:

// fsm_manial_run() thuc hien kiem tra khi nhan button1
// button1 duoc nhan thi chuyen sang trang thai MODE duy tri trong 1 khoang thoi gian(MODE_TIME)
// trong MODE_TIME co the tien hanh chinh sua thoi gian cac LEDs bang button2, button3(duoc hien thuc trong modification_mode.c)
// het MODE_TIME se chuyen lai trang thai 1(automatic)
void fsm_manual_run(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	switch(status_col){
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <fsm_manual_run+0xf0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b0e      	cmp	r3, #14
 80016ca:	d046      	beq.n	800175a <fsm_manual_run+0x9a>
 80016cc:	2b0e      	cmp	r3, #14
 80016ce:	dc66      	bgt.n	800179e <fsm_manual_run+0xde>
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d002      	beq.n	80016da <fsm_manual_run+0x1a>
 80016d4:	2b0d      	cmp	r3, #13
 80016d6:	d01e      	beq.n	8001716 <fsm_manual_run+0x56>

				set_time_value(Time_Auto_Red);
			}
			break;
		default:
			break;
 80016d8:	e061      	b.n	800179e <fsm_manual_run+0xde>
			BlinkLed(Red);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fa6a 	bl	8000bb4 <BlinkLed>
			modification_mode();
 80016e0:	f000 faea 	bl	8001cb8 <modification_mode>
			if(timerCol_flag==1){
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <fsm_manual_run+0xf4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <fsm_manual_run+0x30>
				Init();
 80016ec:	f7ff fa50 	bl	8000b90 <Init>
			if(isButtonPressed(0)==1){
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fd85 	bl	8001200 <isButtonPressed>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d152      	bne.n	80017a2 <fsm_manual_run+0xe2>
				status_col=MAN_GREEN;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <fsm_manual_run+0xf0>)
 80016fe:	220d      	movs	r2, #13
 8001700:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8001702:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001706:	f7ff fbdf 	bl	8000ec8 <setTimerCol>
				set_time_value(Time_Auto_Green);
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <fsm_manual_run+0xf8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f884 	bl	800181c <set_time_value>
			break;
 8001714:	e045      	b.n	80017a2 <fsm_manual_run+0xe2>
			BlinkLed(Green);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fa4c 	bl	8000bb4 <BlinkLed>
			modification_mode();
 800171c:	f000 facc 	bl	8001cb8 <modification_mode>
			if(timerCol_flag==1){
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <fsm_manual_run+0xf4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <fsm_manual_run+0x74>
				status_col=INIT;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <fsm_manual_run+0xf0>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <fsm_manual_run+0xfc>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fd63 	bl	8001200 <isButtonPressed>
 800173a:	4603      	mov	r3, r0
 800173c:	2b01      	cmp	r3, #1
 800173e:	d132      	bne.n	80017a6 <fsm_manual_run+0xe6>
				status_col=MAN_YELLOW;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <fsm_manual_run+0xf0>)
 8001742:	220e      	movs	r2, #14
 8001744:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 8001746:	f643 2098 	movw	r0, #15000	; 0x3a98
 800174a:	f7ff fbbd 	bl	8000ec8 <setTimerCol>
				set_time_value(Time_Auto_Yellow);
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <fsm_manual_run+0x100>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f862 	bl	800181c <set_time_value>
			break;
 8001758:	e025      	b.n	80017a6 <fsm_manual_run+0xe6>
			BlinkLed(Yellow);
 800175a:	2002      	movs	r0, #2
 800175c:	f7ff fa2a 	bl	8000bb4 <BlinkLed>
			modification_mode();
 8001760:	f000 faaa 	bl	8001cb8 <modification_mode>
			if(timerCol_flag==1){
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <fsm_manual_run+0xf4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <fsm_manual_run+0xb8>
				status_col=INIT;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <fsm_manual_run+0xf0>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
				status_row=INIT;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <fsm_manual_run+0xfc>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)==1){
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fd41 	bl	8001200 <isButtonPressed>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d112      	bne.n	80017aa <fsm_manual_run+0xea>
				status_col=MAN_RED;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <fsm_manual_run+0xf0>)
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
				setTimerCol(MODE_TIME);
 800178a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800178e:	f7ff fb9b 	bl	8000ec8 <setTimerCol>
				set_time_value(Time_Auto_Red);
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <fsm_manual_run+0x104>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f840 	bl	800181c <set_time_value>
			break;
 800179c:	e005      	b.n	80017aa <fsm_manual_run+0xea>
			break;
 800179e:	bf00      	nop
 80017a0:	e004      	b.n	80017ac <fsm_manual_run+0xec>
			break;
 80017a2:	bf00      	nop
 80017a4:	e002      	b.n	80017ac <fsm_manual_run+0xec>
			break;
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <fsm_manual_run+0xec>
			break;
 80017aa:	bf00      	nop
	}
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000e0 	.word	0x200000e0
 80017b4:	200000a0 	.word	0x200000a0
 80017b8:	20000004 	.word	0x20000004
 80017bc:	200000e4 	.word	0x200000e4
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000000 	.word	0x20000000

080017c8 <set_Time_Auto_Red>:
int Time_Auto_Red =15000;
int Time_Auto_Green =14000;
int Time_Auto_Yellow = 1000;


void set_Time_Auto_Red(int duration){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	Time_Auto_Red = duration;
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <set_Time_Auto_Red+0x18>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20000000 	.word	0x20000000

080017e4 <set_Time_Auto_Green>:
void set_Time_Auto_Green(int duration){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	Time_Auto_Green = duration;
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <set_Time_Auto_Green+0x18>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000004 	.word	0x20000004

08001800 <set_Time_Auto_Yellow>:
void set_Time_Auto_Yellow(int duration){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	Time_Auto_Yellow = duration;
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <set_Time_Auto_Yellow+0x18>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000008 	.word	0x20000008

0800181c <set_time_value>:


int time_value=0;
void set_time_value(int duration){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	time_value=duration;
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <set_time_value+0x18>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	200000f0 	.word	0x200000f0

08001838 <run_time_value>:

void run_time_value(){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	if(timer3_flag==1){
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <run_time_value+0x2c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10d      	bne.n	8001860 <run_time_value+0x28>
		setTimer3(1000);
 8001844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001848:	f7ff fb76 	bl	8000f38 <setTimer3>
		if(time_value>0) time_value-=1000;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <run_time_value+0x30>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dd05      	ble.n	8001860 <run_time_value+0x28>
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <run_time_value+0x30>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800185c:	4a02      	ldr	r2, [pc, #8]	; (8001868 <run_time_value+0x30>)
 800185e:	6013      	str	r3, [r2, #0]
	}
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000b0 	.word	0x200000b0
 8001868:	200000f0 	.word	0x200000f0

0800186c <HAL_UART_RxCpltCallback>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_UART_RxCpltCallback+0x5c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11f      	bne.n	80018be <HAL_UART_RxCpltCallback+0x52>

		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800187e:	2332      	movs	r3, #50	; 0x32
 8001880:	2201      	movs	r2, #1
 8001882:	4912      	ldr	r1, [pc, #72]	; (80018cc <HAL_UART_RxCpltCallback+0x60>)
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <HAL_UART_RxCpltCallback+0x64>)
 8001886:	f002 fbca 	bl	800401e <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_UART_RxCpltCallback+0x68>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	b2d1      	uxtb	r1, r2
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_UART_RxCpltCallback+0x68>)
 8001894:	7011      	strb	r1, [r2, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_UART_RxCpltCallback+0x60>)
 800189a:	7819      	ldrb	r1, [r3, #0]
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_UART_RxCpltCallback+0x6c>)
 800189e:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_UART_RxCpltCallback+0x68>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b1e      	cmp	r3, #30
 80018a6:	d102      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x42>
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_UART_RxCpltCallback+0x68>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_UART_RxCpltCallback+0x70>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	4905      	ldr	r1, [pc, #20]	; (80018cc <HAL_UART_RxCpltCallback+0x60>)
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_UART_RxCpltCallback+0x64>)
 80018ba:	f002 fc42 	bl	8004142 <HAL_UART_Receive_IT>
	}
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	200000f4 	.word	0x200000f4
 80018d0:	20000228 	.word	0x20000228
 80018d4:	200000f5 	.word	0x200000f5
 80018d8:	200001c0 	.word	0x200001c0
 80018dc:	200000f6 	.word	0x200000f6

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e4:	f000 fc02 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f838 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ec:	f000 f964 	bl	8001bb8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80018f0:	f000 f8c2 	bl	8001a78 <MX_TIM3_Init>
  MX_TIM2_Init();
 80018f4:	f000 f874 	bl	80019e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80018f8:	f000 f934 	bl	8001b64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018fc:	2100      	movs	r1, #0
 80018fe:	4813      	ldr	r0, [pc, #76]	; (800194c <main+0x6c>)
 8001900:	f001 fcdc 	bl	80032bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <main+0x70>)
 8001906:	f001 fc2f 	bl	8003168 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 800190a:	2201      	movs	r2, #1
 800190c:	4911      	ldr	r1, [pc, #68]	; (8001954 <main+0x74>)
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <main+0x78>)
 8001910:	f002 fc17 	bl	8004142 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init();
 8001914:	f7ff f93c 	bl	8000b90 <Init>

  setTimerBuzzer(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f7ff fab9 	bl	8000e90 <setTimerBuzzer>
	setBuzzerLength(10);
 800191e:	200a      	movs	r0, #10
 8001920:	f7ff fa96 	bl	8000e50 <setBuzzerLength>
  setTimer2(10);
 8001924:	200a      	movs	r0, #10
 8001926:	f7ff faeb 	bl	8000f00 <setTimer2>
  setTimer3(10);//for run_time_value
 800192a:	200a      	movs	r0, #10
 800192c:	f7ff fb04 	bl	8000f38 <setTimer3>
  setTimerUart(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f7ff fb1d 	bl	8000f70 <setTimerUart>
  setTimer5(10);
 8001936:	200a      	movs	r0, #10
 8001938:	f7ff fb52 	bl	8000fe0 <setTimer5>

//  char str[20];
  while (1)
  {
	  fsm_automatic_run();
 800193c:	f7ff fd1c 	bl	8001378 <fsm_automatic_run>
	  fsm_manual_run();
 8001940:	f7ff febe 	bl	80016c0 <fsm_manual_run>
	  uart_run();
 8001944:	f7ff fa52 	bl	8000dec <uart_run>
	  fsm_automatic_run();
 8001948:	e7f8      	b.n	800193c <main+0x5c>
 800194a:	bf00      	nop
 800194c:	20000178 	.word	0x20000178
 8001950:	200001e0 	.word	0x200001e0
 8001954:	200000f4 	.word	0x200000f4
 8001958:	20000228 	.word	0x20000228

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b090      	sub	sp, #64	; 0x40
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	2228      	movs	r2, #40	; 0x28
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f86c 	bl	8004a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001982:	2301      	movs	r3, #1
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001986:	2310      	movs	r3, #16
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198a:	2302      	movs	r3, #2
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800198e:	2300      	movs	r3, #0
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001992:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f000 ff79 	bl	8002894 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80019a8:	f000 f980 	bl	8001cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ac:	230f      	movs	r3, #15
 80019ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 f9e4 	bl	8002d94 <HAL_RCC_ClockConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80019d2:	f000 f96b 	bl	8001cac <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3740      	adds	r7, #64	; 0x40
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM2_Init+0x94>)
 80019fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a06:	223f      	movs	r2, #63	; 0x3f
 8001a08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a12:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a26:	f001 fb4f 	bl	80030c8 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a30:	f000 f93c 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a42:	f001 fea3 	bl	800378c <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a4c:	f000 f92e 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM2_Init+0x94>)
 8001a5e:	f002 fa21 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a68:	f000 f920 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001e0 	.word	0x200001e0

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <MX_TIM3_Init+0xe8>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ab0:	223f      	movs	r2, #63	; 0x3f
 8001ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ace:	4823      	ldr	r0, [pc, #140]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ad0:	f001 fafa 	bl	80030c8 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ada:	f000 f8e7 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aec:	f001 fe4e 	bl	800378c <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001af6:	f000 f8d9 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001afc:	f001 fb86 	bl	800320c <HAL_TIM_PWM_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b06:	f000 f8d1 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b1a:	f002 f9c3 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b24:	f000 f8c2 	bl	8001cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b40:	f001 fd66 	bl	8003610 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f000 f8af 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b50:	f000 f9aa 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000178 	.word	0x20000178
 8001b60:	40000400 	.word	0x40000400

08001b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_USART2_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	f002 f9f2 	bl	8003f84 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f000 f881 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000228 	.word	0x20000228
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_GPIO_Init+0xd0>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8001c02:	4822      	ldr	r0, [pc, #136]	; (8001c8c <MX_GPIO_Init+0xd4>)
 8001c04:	f000 fe2d 	bl	8002862 <HAL_GPIO_WritePin>
                          |pled1_Pin|pled2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001c0e:	4820      	ldr	r0, [pc, #128]	; (8001c90 <MX_GPIO_Init+0xd8>)
 8001c10:	f000 fe27 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001c14:	2313      	movs	r3, #19
 8001c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	481a      	ldr	r0, [pc, #104]	; (8001c90 <MX_GPIO_Init+0xd8>)
 8001c28:	f000 fc80 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4813      	ldr	r0, [pc, #76]	; (8001c8c <MX_GPIO_Init+0xd4>)
 8001c40:	f000 fc74 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED1_Pin LED2_Pin LED4_Pin LED3_Pin
                           pled1_Pin pled2_Pin */
  GPIO_InitStruct.Pin = P_LED1_Pin|LED2_Pin|LED4_Pin|LED3_Pin
 8001c44:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8001c48:	60bb      	str	r3, [r7, #8]
                          |pled1_Pin|pled2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2302      	movs	r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <MX_GPIO_Init+0xd4>)
 8001c5e:	f000 fc65 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = P_LED2_Pin|LED1_Pin;
 8001c62:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_GPIO_Init+0xd8>)
 8001c7c:	f000 fc56 	bl	800252c <HAL_GPIO_Init>

}
 8001c80:	bf00      	nop
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010c00 	.word	0x40010c00
 8001c90:	40010800 	.word	0x40010800

08001c94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	timerRun();
 8001c9c:	f7ff f9bc 	bl	8001018 <timerRun>
	getKeyInput();
 8001ca0:	f7ff fac8 	bl	8001234 <getKeyInput>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>
	...

08001cb8 <modification_mode>:

#include "modification_mode.h"



void modification_mode(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	//cap nhat cac gia tri Time_Auto_... khi nhan button2
	switch(status_col){
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <modification_mode+0x104>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b0e      	cmp	r3, #14
 8001cc2:	d048      	beq.n	8001d56 <modification_mode+0x9e>
 8001cc4:	2b0e      	cmp	r3, #14
 8001cc6:	dc67      	bgt.n	8001d98 <modification_mode+0xe0>
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d002      	beq.n	8001cd2 <modification_mode+0x1a>
 8001ccc:	2b0d      	cmp	r3, #13
 8001cce:	d021      	beq.n	8001d14 <modification_mode+0x5c>
				set_Time_Auto_Yellow(Time_Auto_Yellow);
				set_time_value(Time_Auto_Yellow);
			}
			break;
		default:
			break;
 8001cd0:	e062      	b.n	8001d98 <modification_mode+0xe0>
			if(isButtonPressed(1)==1){
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff fa94 	bl	8001200 <isButtonPressed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d15e      	bne.n	8001d9c <modification_mode+0xe4>
				Time_Auto_Red = (Time_Auto_Red+1000)%100000;//ms
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <modification_mode+0x108>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <modification_mode+0x10c>)
 8001ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8001cec:	1359      	asrs	r1, r3, #13
 8001cee:	17d3      	asrs	r3, r2, #31
 8001cf0:	1acb      	subs	r3, r1, r3
 8001cf2:	4935      	ldr	r1, [pc, #212]	; (8001dc8 <modification_mode+0x110>)
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <modification_mode+0x108>)
 8001cfc:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Red(Time_Auto_Red);
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <modification_mode+0x108>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fd60 	bl	80017c8 <set_Time_Auto_Red>
				set_time_value(Time_Auto_Red);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <modification_mode+0x108>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fd85 	bl	800181c <set_time_value>
			break;
 8001d12:	e043      	b.n	8001d9c <modification_mode+0xe4>
			if(isButtonPressed(1)==1){
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff fa73 	bl	8001200 <isButtonPressed>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d13f      	bne.n	8001da0 <modification_mode+0xe8>
				Time_Auto_Green = (Time_Auto_Green+1000)%100000;//ms
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <modification_mode+0x114>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <modification_mode+0x10c>)
 8001d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d2e:	1359      	asrs	r1, r3, #13
 8001d30:	17d3      	asrs	r3, r2, #31
 8001d32:	1acb      	subs	r3, r1, r3
 8001d34:	4924      	ldr	r1, [pc, #144]	; (8001dc8 <modification_mode+0x110>)
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <modification_mode+0x114>)
 8001d3e:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Green(Time_Auto_Green);
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <modification_mode+0x114>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fd4d 	bl	80017e4 <set_Time_Auto_Green>
				set_time_value(Time_Auto_Green);
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <modification_mode+0x114>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fd64 	bl	800181c <set_time_value>
			break;
 8001d54:	e024      	b.n	8001da0 <modification_mode+0xe8>
			if(isButtonPressed(1)==1){
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fa52 	bl	8001200 <isButtonPressed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d120      	bne.n	8001da4 <modification_mode+0xec>
				Time_Auto_Yellow = (Time_Auto_Yellow+1000)%100000;//ms
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <modification_mode+0x118>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <modification_mode+0x10c>)
 8001d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d70:	1359      	asrs	r1, r3, #13
 8001d72:	17d3      	asrs	r3, r2, #31
 8001d74:	1acb      	subs	r3, r1, r3
 8001d76:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <modification_mode+0x110>)
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <modification_mode+0x118>)
 8001d80:	6013      	str	r3, [r2, #0]
				set_Time_Auto_Yellow(Time_Auto_Yellow);
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <modification_mode+0x118>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd3a 	bl	8001800 <set_Time_Auto_Yellow>
				set_time_value(Time_Auto_Yellow);
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <modification_mode+0x118>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd43 	bl	800181c <set_time_value>
			break;
 8001d96:	e005      	b.n	8001da4 <modification_mode+0xec>
			break;
 8001d98:	bf00      	nop
 8001d9a:	e004      	b.n	8001da6 <modification_mode+0xee>
			break;
 8001d9c:	bf00      	nop
 8001d9e:	e002      	b.n	8001da6 <modification_mode+0xee>
			break;
 8001da0:	bf00      	nop
 8001da2:	e000      	b.n	8001da6 <modification_mode+0xee>
			break;
 8001da4:	bf00      	nop
	}
	//nhan button3 de ket thuc mode va reset lại hệ thống
	if(isButtonPressed(2)==1){
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7ff fa2a 	bl	8001200 <isButtonPressed>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <modification_mode+0xfe>
		Init();
 8001db2:	f7fe feed 	bl	8000b90 <Init>
	}
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200000e0 	.word	0x200000e0
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	14f8b589 	.word	0x14f8b589
 8001dc8:	000186a0 	.word	0x000186a0
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_MspInit+0x5c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_MspInit+0x5c>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_MspInit+0x60>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_MspInit+0x60>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d114      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	201c      	movs	r0, #28
 8001e68:	f000 fa79 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f000 fa92 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e72:	e010      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10b      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_TIM_Base_MspInit+0x68>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40000400 	.word	0x40000400

08001ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_TIM_MspPostInit+0x58>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d117      	bne.n	8001ef8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_TIM_MspPostInit+0x5c>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_TIM_MspPostInit+0x5c>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_TIM_MspPostInit+0x5c>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001ee0:	2340      	movs	r3, #64	; 0x40
 8001ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <HAL_TIM_MspPostInit+0x60>)
 8001ef4:	f000 fb1a 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010800 	.word	0x40010800

08001f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_UART_MspInit+0x98>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d137      	bne.n	8001f9c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f36:	61d3      	str	r3, [r2, #28]
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_UART_MspInit+0x9c>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480f      	ldr	r0, [pc, #60]	; (8001fac <HAL_UART_MspInit+0xa0>)
 8001f70:	f000 fadc 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f74:	2308      	movs	r3, #8
 8001f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <HAL_UART_MspInit+0xa0>)
 8001f88:	f000 fad0 	bl	800252c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2026      	movs	r0, #38	; 0x26
 8001f92:	f000 f9e4 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f96:	2026      	movs	r0, #38	; 0x26
 8001f98:	f000 f9fd 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010800 	.word	0x40010800

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff6:	f000 f8bf 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f001 f9fb 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200001e0 	.word	0x200001e0

08002014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <USART2_IRQHandler+0x10>)
 800201a:	f002 f8c3 	bl	80041a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000228 	.word	0x20000228

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f002 fccc 	bl	80049f4 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20005000 	.word	0x20005000
 8002088:	00000400 	.word	0x00000400
 800208c:	200000f8 	.word	0x200000f8
 8002090:	20000280 	.word	0x20000280

08002094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a2:	490d      	ldr	r1, [pc, #52]	; (80020d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020c6:	f7ff ffe5 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f002 fc99 	bl	8004a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ce:	f7ff fc07 	bl	80018e0 <main>
  bx lr
 80020d2:	4770      	bx	lr
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80020dc:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 80020e0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80020e4:	20000280 	.word	0x20000280

080020e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_2_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x28>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x28>)
 80020f6:	f043 0310 	orr.w	r3, r3, #16
 80020fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f923 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fe64 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f93b 	bl	80023b2 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f903 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000000c 	.word	0x2000000c
 8002170:	20000014 	.word	0x20000014
 8002174:	20000010 	.word	0x20000010

08002178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_IncTick+0x1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_IncTick+0x20>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a03      	ldr	r2, [pc, #12]	; (8002198 <HAL_IncTick+0x20>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000014 	.word	0x20000014
 8002198:	2000026c 	.word	0x2000026c

0800219c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <HAL_GetTick+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	2000026c 	.word	0x2000026c

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <__NVIC_EnableIRQ+0x34>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff90 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff2d 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff42 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff90 	bl	80022a0 <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5f 	bl	800224c <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff35 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 020e 	bic.w	r2, r2, #14
 8002400:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	2b02      	cmp	r3, #2
 8002454:	d005      	beq.n	8002462 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e051      	b.n	8002506 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 020e 	bic.w	r2, r2, #14
 8002470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Abort_IT+0xd0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d029      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xa0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_DMA_Abort_IT+0xd4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_Abort_IT+0x9c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_DMA_Abort_IT+0xd8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01a      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x96>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_DMA_Abort_IT+0xdc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x90>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_DMA_Abort_IT+0xe0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00a      	beq.n	80024ca <HAL_DMA_Abort_IT+0x8a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_DMA_Abort_IT+0xe4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d102      	bne.n	80024c4 <HAL_DMA_Abort_IT+0x84>
 80024be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024c2:	e00e      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c8:	e00b      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ce:	e008      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	e005      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024da:	e002      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024dc:	2310      	movs	r3, #16
 80024de:	e000      	b.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 80024e0:	2301      	movs	r3, #1
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_DMA_Abort_IT+0xe8>)
 80024e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
    } 
  }
  return status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40020008 	.word	0x40020008
 8002514:	4002001c 	.word	0x4002001c
 8002518:	40020030 	.word	0x40020030
 800251c:	40020044 	.word	0x40020044
 8002520:	40020058 	.word	0x40020058
 8002524:	4002006c 	.word	0x4002006c
 8002528:	40020000 	.word	0x40020000

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	; 0x2c
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e169      	b.n	8002814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002540:	2201      	movs	r2, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8158 	bne.w	800280e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a9a      	ldr	r2, [pc, #616]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002568:	4a98      	ldr	r2, [pc, #608]	; (80027cc <HAL_GPIO_Init+0x2a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d875      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800256e:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002574:	4a96      	ldr	r2, [pc, #600]	; (80027d0 <HAL_GPIO_Init+0x2a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d86f      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800257a:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d052      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002580:	4a94      	ldr	r2, [pc, #592]	; (80027d4 <HAL_GPIO_Init+0x2a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d869      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002586:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04c      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 800258c:	4a92      	ldr	r2, [pc, #584]	; (80027d8 <HAL_GPIO_Init+0x2ac>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d863      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002592:	4a92      	ldr	r2, [pc, #584]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d046      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002598:	4a90      	ldr	r2, [pc, #576]	; (80027dc <HAL_GPIO_Init+0x2b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d85d      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d82a      	bhi.n	80025f8 <HAL_GPIO_Init+0xcc>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d859      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <HAL_GPIO_Init+0x80>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002655 	.word	0x08002655
 80025bc:	0800265b 	.word	0x0800265b
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	0800265b 	.word	0x0800265b
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	0800265b 	.word	0x0800265b
 80025d4:	0800265b 	.word	0x0800265b
 80025d8:	0800265b 	.word	0x0800265b
 80025dc:	0800265b 	.word	0x0800265b
 80025e0:	0800265b 	.word	0x0800265b
 80025e4:	0800265b 	.word	0x0800265b
 80025e8:	0800265b 	.word	0x0800265b
 80025ec:	0800265b 	.word	0x0800265b
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <HAL_GPIO_Init+0x2b4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fe:	e02c      	b.n	800265a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e029      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e024      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3308      	adds	r3, #8
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e01f      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	330c      	adds	r3, #12
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e01a      	b.n	800265c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e013      	b.n	800265c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
          break;
 8002646:	e009      	b.n	800265c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	615a      	str	r2, [r3, #20]
          break;
 8002652:	e003      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x130>
          break;
 800265a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d801      	bhi.n	8002666 <HAL_GPIO_Init+0x13a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <HAL_GPIO_Init+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d802      	bhi.n	8002678 <HAL_GPIO_Init+0x14c>
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x152>
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3b08      	subs	r3, #8
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	210f      	movs	r1, #15
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80b1 	beq.w	800280e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x2b8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <HAL_GPIO_Init+0x2c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <HAL_GPIO_Init+0x2c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1e8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_GPIO_Init+0x2c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1e4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3d      	ldr	r2, [pc, #244]	; (80027f8 <HAL_GPIO_Init+0x2cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1e0>
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 800270c:	2304      	movs	r3, #4
 800270e:	e004      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002710:	2302      	movs	r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x1ee>
 8002718:	2300      	movs	r3, #0
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800272a:	492f      	ldr	r1, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x2bc>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	492c      	ldr	r1, [pc, #176]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4928      	ldr	r1, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800275c:	4013      	ands	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4922      	ldr	r1, [pc, #136]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	43db      	mvns	r3, r3
 8002782:	491e      	ldr	r1, [pc, #120]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002784:	4013      	ands	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4918      	ldr	r1, [pc, #96]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4914      	ldr	r1, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d021      	beq.n	8002800 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e021      	b.n	800280e <HAL_GPIO_Init+0x2e2>
 80027ca:	bf00      	nop
 80027cc:	10320000 	.word	0x10320000
 80027d0:	10310000 	.word	0x10310000
 80027d4:	10220000 	.word	0x10220000
 80027d8:	10210000 	.word	0x10210000
 80027dc:	10120000 	.word	0x10120000
 80027e0:	10110000 	.word	0x10110000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_GPIO_Init+0x304>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <HAL_GPIO_Init+0x304>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ae8e 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800287e:	e003      	b.n	8002888 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	041a      	lsls	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e26c      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d00c      	beq.n	80028da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x12c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e246      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x76>
 80028fc:	4b80      	ldr	r3, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a7f      	ldr	r2, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xbc>
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fc14 	bl	800219c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fc10 	bl	800219c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1fa      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe4>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fc00 	bl	800219c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fbfc 	bl	800219c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1e6      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x10c>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1ba      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4939      	ldr	r1, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fbb5 	bl	800219c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7ff fbb1 	bl	800219c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e19b      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4927      	ldr	r1, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fb94 	bl	800219c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff fb90 	bl	800219c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e17a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03a      	beq.n	8002b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fb74 	bl	800219c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff fb70 	bl	800219c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e15a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 fad8 	bl	800308c <RCC_Delay>
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7ff fb5a 	bl	800219c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7ff fb56 	bl	800219c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e140      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	42420000 	.word	0x42420000
 8002b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e9      	bne.n	8002aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a6 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b97      	ldr	r3, [pc, #604]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a93      	ldr	r2, [pc, #588]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff fb17 	bl	800219c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7ff fb13 	bl	800219c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0fd      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x312>
 8002b98:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a7a      	ldr	r2, [pc, #488]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	e01c      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x356>
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a6c      	ldr	r2, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bea:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a66      	ldr	r2, [pc, #408]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff fac7 	bl	800219c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff fac3 	bl	800219c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0ab      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCC_OscConfig+0x37e>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fab1 	bl	800219c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7ff faad 	bl	800219c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e095      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8081 	beq.w	8002d7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d061      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d146      	bne.n	8002d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff fa81 	bl	800219c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff fa7d 	bl	800219c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e067      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	492d      	ldr	r1, [pc, #180]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a19      	ldr	r1, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fa51 	bl	800219c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7ff fa4d 	bl	800219c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e037      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46a>
 8002d1c:	e02f      	b.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff fa3a 	bl	800219c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7ff fa36 	bl	800219c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e020      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x498>
 8002d4a:	e018      	b.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e013      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	42420060 	.word	0x42420060

08002d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0d0      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b67      	ldr	r3, [pc, #412]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4965      	ldr	r1, [pc, #404]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b8      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	494d      	ldr	r1, [pc, #308]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d040      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e073      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4936      	ldr	r1, [pc, #216]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e84:	f7ff f98a 	bl	800219c <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7ff f986 	bl	800219c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e053      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d210      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 0207 	bic.w	r2, r3, #7
 8002eca:	4922      	ldr	r1, [pc, #136]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e032      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4916      	ldr	r1, [pc, #88]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	490a      	ldr	r1, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1cc>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f8e8 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08005300 	.word	0x08005300
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	20000010 	.word	0x20000010

08002f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b490      	push	{r4, r7}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f70:	1d3c      	adds	r4, r7, #4
 8002f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f78:	f240 2301 	movw	r3, #513	; 0x201
 8002f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x46>
 8002fa6:	e02d      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	623b      	str	r3, [r7, #32]
      break;
 8002fac:	e02d      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fba:	4413      	add	r3, r2
 8002fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c5b      	lsrs	r3, r3, #17
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fda:	4413      	add	r3, r2
 8002fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe6:	fb02 f203 	mul.w	r2, r2, r3
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e004      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	623b      	str	r3, [r7, #32]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6a3b      	ldr	r3, [r7, #32]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc90      	pop	{r4, r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	080052f0 	.word	0x080052f0
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	003d0900 	.word	0x003d0900

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b02      	ldr	r3, [pc, #8]	; (8003038 <HAL_RCC_GetHCLKFreq+0x10>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	2000000c 	.word	0x2000000c

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff2 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	08005310 	.word	0x08005310

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff ffde 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0adb      	lsrs	r3, r3, #11
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	08005310 	.word	0x08005310

0800308c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RCC_Delay+0x34>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <RCC_Delay+0x38>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a8:	bf00      	nop
  }
  while (Delay --);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	60fa      	str	r2, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <RCC_Delay+0x1c>
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e041      	b.n	800315e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fea2 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fc28 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e03a      	b.n	80031f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_TIM_Base_Start_IT+0x98>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x58>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d009      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x58>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_TIM_Base_Start_IT+0x9c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x58>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a13      	ldr	r2, [pc, #76]	; (8003208 <HAL_TIM_Base_Start_IT+0xa0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d010      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e007      	b.n	80031f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800

0800320c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f839 	bl	80032aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fb86 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_TIM_PWM_Start+0x24>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e022      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d109      	bne.n	80032fa <HAL_TIM_PWM_Start+0x3e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e015      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d109      	bne.n	8003314 <HAL_TIM_PWM_Start+0x58>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e05e      	b.n	80033ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0x82>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	e013      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0x92>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800334c:	e00b      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xa2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	e003      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fd74 	bl	8003e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_TIM_PWM_Start+0x138>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d107      	bne.n	800338e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_PWM_Start+0x138>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_TIM_PWM_Start+0x13c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_TIM_PWM_Start+0x140>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d010      	beq.n	80033ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	e007      	b.n	80033ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa6f 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa62 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa71 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa45 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa38 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fa47 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0208 	mvn.w	r2, #8
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa1b 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa0e 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa1d 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9f1 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9e4 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f9f3 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fb88 	bl	8001c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fce1 	bl	8003f72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9b7 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fcac 	bl	8003f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003626:	2302      	movs	r3, #2
 8003628:	e0ac      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x174>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f200 809f 	bhi.w	8003778 <HAL_TIM_PWM_ConfigChannel+0x168>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003675 	.word	0x08003675
 8003644:	08003779 	.word	0x08003779
 8003648:	08003779 	.word	0x08003779
 800364c:	08003779 	.word	0x08003779
 8003650:	080036b5 	.word	0x080036b5
 8003654:	08003779 	.word	0x08003779
 8003658:	08003779 	.word	0x08003779
 800365c:	08003779 	.word	0x08003779
 8003660:	080036f7 	.word	0x080036f7
 8003664:	08003779 	.word	0x08003779
 8003668:	08003779 	.word	0x08003779
 800366c:	08003779 	.word	0x08003779
 8003670:	08003737 	.word	0x08003737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f9d0 	bl	8003a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0208 	orr.w	r2, r2, #8
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	619a      	str	r2, [r3, #24]
      break;
 80036b2:	e062      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa16 	bl	8003aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
      break;
 80036f4:	e041      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa5f 	bl	8003bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0208 	orr.w	r2, r2, #8
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	61da      	str	r2, [r3, #28]
      break;
 8003734:	e021      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 faa9 	bl	8003c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	61da      	str	r2, [r3, #28]
      break;
 8003776:	e000      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b3      	b.n	800390c <HAL_TIM_ConfigClockSource+0x180>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd0>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8085 	beq.w	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa2>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x116>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xf6>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x136>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x156>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x156>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x156>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 faee 	bl	8003e1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04e      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 fad7 	bl	8003e1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03b      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fa4e 	bl	8003d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 faa5 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02b      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fa6c 	bl	8003d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fa95 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01b      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa2e 	bl	8003d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa85 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00b      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 fa7c 	bl	8003dea <TIM_ITRx_SetConfig>
        break;
 80038f2:	e002      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0xbc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <TIM_Base_SetConfig+0xbc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <TIM_Base_SetConfig+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800

08003a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f023 0201 	bic.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <TIM_OC1_SetConfig+0xc8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <TIM_OC1_SetConfig+0xc8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00

08003aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0210 	bic.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <TIM_OC2_SetConfig+0xd0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10d      	bne.n	8003b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <TIM_OC2_SetConfig+0xd0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d113      	bne.n	8003b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00

08003bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <TIM_OC3_SetConfig+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10d      	bne.n	8003c3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC3_SetConfig+0xd0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d113      	bne.n	8003c6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <TIM_OC4_SetConfig+0x98>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00

08003d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 030a 	bic.w	r3, r3, #10
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f023 0210 	bic.w	r2, r3, #16
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	031b      	lsls	r3, r3, #12
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f043 0307 	orr.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b087      	sub	sp, #28
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	021a      	lsls	r2, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	609a      	str	r2, [r3, #8]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2201      	movs	r2, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e046      	b.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f08:	d009      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10c      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800

08003f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03f      	b.n	8004016 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd ffae 	bl	8001f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fc85 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	; 0x28
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d17c      	bne.n	8004138 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_UART_Transmit+0x2c>
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e075      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_UART_Transmit+0x3e>
 8004058:	2302      	movs	r3, #2
 800405a:	e06e      	b.n	800413a <HAL_UART_Transmit+0x11c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004072:	f7fe f893 	bl	800219c <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040b0:	e02a      	b.n	8004108 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa38 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e036      	b.n	800413a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3302      	adds	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e007      	b.n	80040fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cf      	bne.n	80040b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fa08 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	4613      	mov	r3, r2
 800414e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d11d      	bne.n	8004198 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_UART_Receive_IT+0x26>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e016      	b.n	800419a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_UART_Receive_IT+0x38>
 8004176:	2302      	movs	r3, #2
 8004178:	e00f      	b.n	800419a <HAL_UART_Receive_IT+0x58>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	461a      	mov	r2, r3
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa19 	bl	80045c6 <UART_Start_Receive_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	e000      	b.n	800419a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_UART_IRQHandler+0x52>
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fac9 	bl	8004786 <UART_Receive_IT>
      return;
 80041f4:	e17b      	b.n	80044ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80b1 	beq.w	8004360 <HAL_UART_IRQHandler+0x1bc>
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_UART_IRQHandler+0x70>
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a6 	beq.w	8004360 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_UART_IRQHandler+0x90>
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_UART_IRQHandler+0xb0>
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0202 	orr.w	r2, r3, #2
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_UART_IRQHandler+0xd0>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00f      	beq.n	800429e <HAL_UART_IRQHandler+0xfa>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_UART_IRQHandler+0xee>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0208 	orr.w	r2, r3, #8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 811e 	beq.w	80044e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_UART_IRQHandler+0x11e>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa62 	bl	8004786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_UART_IRQHandler+0x146>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d031      	beq.n	800434e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9a4 	bl	8004638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d023      	beq.n	8004346 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4a76      	ldr	r2, [pc, #472]	; (80044f4 <HAL_UART_IRQHandler+0x350>)
 800431c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe f88c 	bl	8002440 <HAL_DMA_Abort_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00e      	b.n	800435c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8e3 	bl	800450a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00a      	b.n	800435c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8df 	bl	800450a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e006      	b.n	800435c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8db 	bl	800450a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800435a:	e0c3      	b.n	80044e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	bf00      	nop
    return;
 800435e:	e0c1      	b.n	80044e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 80a1 	bne.w	80044ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809b 	beq.w	80044ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8095 	beq.w	80044ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04e      	beq.n	8004444 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043b0:	8a3b      	ldrh	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8098 	beq.w	80044e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043bc:	8a3a      	ldrh	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	f080 8092 	bcs.w	80044e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8a3a      	ldrh	r2, [r7, #16]
 80043c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d02b      	beq.n	800442c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004402:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0210 	bic.w	r2, r2, #16
 8004420:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd ffcf 	bl	80023ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b29b      	uxth	r3, r3
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f86d 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004442:	e051      	b.n	80044e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444c:	b29b      	uxth	r3, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d047      	beq.n	80044ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800445c:	8a7b      	ldrh	r3, [r7, #18]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d044      	beq.n	80044ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004470:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0210 	bic.w	r2, r2, #16
 800449e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a0:	8a7b      	ldrh	r3, [r7, #18]
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f839 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044aa:	e01f      	b.n	80044ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_UART_IRQHandler+0x324>
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8f9 	bl	80046b8 <UART_Transmit_IT>
    return;
 80044c6:	e012      	b.n	80044ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_UART_IRQHandler+0x34a>
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f93a 	bl	8004756 <UART_EndTransmit_IT>
    return;
 80044e2:	e004      	b.n	80044ee <HAL_UART_IRQHandler+0x34a>
    return;
 80044e4:	bf00      	nop
 80044e6:	e002      	b.n	80044ee <HAL_UART_IRQHandler+0x34a>
      return;
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <HAL_UART_IRQHandler+0x34a>
      return;
 80044ec:	bf00      	nop
  }
}
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	08004691 	.word	0x08004691

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	e02c      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d028      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x30>
 8004552:	f7fd fe23 	bl	800219c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	429a      	cmp	r2, r3
 8004560:	d21d      	bcs.n	800459e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004570:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00f      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d0c3      	beq.n	8004544 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	4613      	mov	r3, r2
 80045d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2222      	movs	r2, #34	; 0x22
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0220 	orr.w	r2, r2, #32
 800462a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800464e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0210 	bic.w	r2, r2, #16
 8004676:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff2d 	bl	800450a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b21      	cmp	r3, #33	; 0x21
 80046ca:	d13e      	bne.n	800474a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d114      	bne.n	8004700 <UART_Transmit_IT+0x48>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d110      	bne.n	8004700 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]
 80046fe:	e008      	b.n	8004712 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6211      	str	r1, [r2, #32]
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4619      	mov	r1, r3
 8004720:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff febe 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b22      	cmp	r3, #34	; 0x22
 8004798:	f040 8099 	bne.w	80048ce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d117      	bne.n	80047d6 <UART_Receive_IT+0x50>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d113      	bne.n	80047d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
 80047d4:	e026      	b.n	8004824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d007      	beq.n	80047fa <UART_Receive_IT+0x74>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <UART_Receive_IT+0x82>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e008      	b.n	800481a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004814:	b2da      	uxtb	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4619      	mov	r1, r3
 8004832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004834:	2b00      	cmp	r3, #0
 8004836:	d148      	bne.n	80048ca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0220 	bic.w	r2, r2, #32
 8004846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	2b01      	cmp	r3, #1
 8004876:	d123      	bne.n	80048c0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0210 	bic.w	r2, r2, #16
 800488c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d10a      	bne.n	80048b2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fe2f 	bl	800451c <HAL_UARTEx_RxEventCallback>
 80048be:	e002      	b.n	80048c6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc ffd3 	bl	800186c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e002      	b.n	80048d0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004912:	f023 030c 	bic.w	r3, r3, #12
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	430b      	orrs	r3, r1
 800491e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <UART_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fe fb90 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	e002      	b.n	800494e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe fb78 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 800494c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009a      	lsls	r2, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <UART_SetConfig+0x118>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	0119      	lsls	r1, r3, #4
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009a      	lsls	r2, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	fbb2 f2f3 	udiv	r2, r2, r3
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <UART_SetConfig+0x118>)
 8004986:	fba3 0302 	umull	r0, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2064      	movs	r0, #100	; 0x64
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	3332      	adds	r3, #50	; 0x32
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <UART_SetConfig+0x118>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a4:	4419      	add	r1, r3
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <UART_SetConfig+0x118>)
 80049be:	fba3 0302 	umull	r0, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2064      	movs	r0, #100	; 0x64
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	3332      	adds	r3, #50	; 0x32
 80049d0:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <UART_SetConfig+0x118>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	440a      	add	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40013800 	.word	0x40013800
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <__errno>:
 80049f4:	4b01      	ldr	r3, [pc, #4]	; (80049fc <__errno+0x8>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000018 	.word	0x20000018

08004a00 <__libc_init_array>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	2600      	movs	r6, #0
 8004a04:	4d0c      	ldr	r5, [pc, #48]	; (8004a38 <__libc_init_array+0x38>)
 8004a06:	4c0d      	ldr	r4, [pc, #52]	; (8004a3c <__libc_init_array+0x3c>)
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	d109      	bne.n	8004a24 <__libc_init_array+0x24>
 8004a10:	f000 fc5c 	bl	80052cc <_init>
 8004a14:	2600      	movs	r6, #0
 8004a16:	4d0a      	ldr	r5, [pc, #40]	; (8004a40 <__libc_init_array+0x40>)
 8004a18:	4c0a      	ldr	r4, [pc, #40]	; (8004a44 <__libc_init_array+0x44>)
 8004a1a:	1b64      	subs	r4, r4, r5
 8004a1c:	10a4      	asrs	r4, r4, #2
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	d105      	bne.n	8004a2e <__libc_init_array+0x2e>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a28:	4798      	blx	r3
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7ee      	b.n	8004a0c <__libc_init_array+0xc>
 8004a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a32:	4798      	blx	r3
 8004a34:	3601      	adds	r6, #1
 8004a36:	e7f2      	b.n	8004a1e <__libc_init_array+0x1e>
 8004a38:	0800534c 	.word	0x0800534c
 8004a3c:	0800534c 	.word	0x0800534c
 8004a40:	0800534c 	.word	0x0800534c
 8004a44:	08005350 	.word	0x08005350

08004a48 <memset>:
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4402      	add	r2, r0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d100      	bne.n	8004a52 <memset+0xa>
 8004a50:	4770      	bx	lr
 8004a52:	f803 1b01 	strb.w	r1, [r3], #1
 8004a56:	e7f9      	b.n	8004a4c <memset+0x4>

08004a58 <siprintf>:
 8004a58:	b40e      	push	{r1, r2, r3}
 8004a5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a5e:	b500      	push	{lr}
 8004a60:	b09c      	sub	sp, #112	; 0x70
 8004a62:	ab1d      	add	r3, sp, #116	; 0x74
 8004a64:	9002      	str	r0, [sp, #8]
 8004a66:	9006      	str	r0, [sp, #24]
 8004a68:	9107      	str	r1, [sp, #28]
 8004a6a:	9104      	str	r1, [sp, #16]
 8004a6c:	4808      	ldr	r0, [pc, #32]	; (8004a90 <siprintf+0x38>)
 8004a6e:	4909      	ldr	r1, [pc, #36]	; (8004a94 <siprintf+0x3c>)
 8004a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a74:	9105      	str	r1, [sp, #20]
 8004a76:	6800      	ldr	r0, [r0, #0]
 8004a78:	a902      	add	r1, sp, #8
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	f000 f868 	bl	8004b50 <_svfiprintf_r>
 8004a80:	2200      	movs	r2, #0
 8004a82:	9b02      	ldr	r3, [sp, #8]
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	b01c      	add	sp, #112	; 0x70
 8004a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a8c:	b003      	add	sp, #12
 8004a8e:	4770      	bx	lr
 8004a90:	20000018 	.word	0x20000018
 8004a94:	ffff0208 	.word	0xffff0208

08004a98 <__ssputs_r>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	688e      	ldr	r6, [r1, #8]
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	429e      	cmp	r6, r3
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	4690      	mov	r8, r2
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	d838      	bhi.n	8004b1c <__ssputs_r+0x84>
 8004aaa:	898a      	ldrh	r2, [r1, #12]
 8004aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ab0:	d032      	beq.n	8004b18 <__ssputs_r+0x80>
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	6909      	ldr	r1, [r1, #16]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	eba5 0901 	sub.w	r9, r5, r1
 8004abc:	6965      	ldr	r5, [r4, #20]
 8004abe:	444b      	add	r3, r9
 8004ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ac8:	106d      	asrs	r5, r5, #1
 8004aca:	429d      	cmp	r5, r3
 8004acc:	bf38      	it	cc
 8004ace:	461d      	movcc	r5, r3
 8004ad0:	0553      	lsls	r3, r2, #21
 8004ad2:	d531      	bpl.n	8004b38 <__ssputs_r+0xa0>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f000 fb53 	bl	8005180 <_malloc_r>
 8004ada:	4606      	mov	r6, r0
 8004adc:	b950      	cbnz	r0, 8004af4 <__ssputs_r+0x5c>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	f8ca 3000 	str.w	r3, [sl]
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af4:	464a      	mov	r2, r9
 8004af6:	6921      	ldr	r1, [r4, #16]
 8004af8:	f000 face 	bl	8005098 <memcpy>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	6126      	str	r6, [r4, #16]
 8004b0a:	444e      	add	r6, r9
 8004b0c:	6026      	str	r6, [r4, #0]
 8004b0e:	463e      	mov	r6, r7
 8004b10:	6165      	str	r5, [r4, #20]
 8004b12:	eba5 0509 	sub.w	r5, r5, r9
 8004b16:	60a5      	str	r5, [r4, #8]
 8004b18:	42be      	cmp	r6, r7
 8004b1a:	d900      	bls.n	8004b1e <__ssputs_r+0x86>
 8004b1c:	463e      	mov	r6, r7
 8004b1e:	4632      	mov	r2, r6
 8004b20:	4641      	mov	r1, r8
 8004b22:	6820      	ldr	r0, [r4, #0]
 8004b24:	f000 fac6 	bl	80050b4 <memmove>
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	4432      	add	r2, r6
 8004b30:	2000      	movs	r0, #0
 8004b32:	60a3      	str	r3, [r4, #8]
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	e7db      	b.n	8004af0 <__ssputs_r+0x58>
 8004b38:	462a      	mov	r2, r5
 8004b3a:	f000 fb7b 	bl	8005234 <_realloc_r>
 8004b3e:	4606      	mov	r6, r0
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d1e1      	bne.n	8004b08 <__ssputs_r+0x70>
 8004b44:	4650      	mov	r0, sl
 8004b46:	6921      	ldr	r1, [r4, #16]
 8004b48:	f000 face 	bl	80050e8 <_free_r>
 8004b4c:	e7c7      	b.n	8004ade <__ssputs_r+0x46>
	...

08004b50 <_svfiprintf_r>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	4698      	mov	r8, r3
 8004b56:	898b      	ldrh	r3, [r1, #12]
 8004b58:	4607      	mov	r7, r0
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	4614      	mov	r4, r2
 8004b60:	b09d      	sub	sp, #116	; 0x74
 8004b62:	d50e      	bpl.n	8004b82 <_svfiprintf_r+0x32>
 8004b64:	690b      	ldr	r3, [r1, #16]
 8004b66:	b963      	cbnz	r3, 8004b82 <_svfiprintf_r+0x32>
 8004b68:	2140      	movs	r1, #64	; 0x40
 8004b6a:	f000 fb09 	bl	8005180 <_malloc_r>
 8004b6e:	6028      	str	r0, [r5, #0]
 8004b70:	6128      	str	r0, [r5, #16]
 8004b72:	b920      	cbnz	r0, 8004b7e <_svfiprintf_r+0x2e>
 8004b74:	230c      	movs	r3, #12
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	e0d1      	b.n	8004d22 <_svfiprintf_r+0x1d2>
 8004b7e:	2340      	movs	r3, #64	; 0x40
 8004b80:	616b      	str	r3, [r5, #20]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9309      	str	r3, [sp, #36]	; 0x24
 8004b86:	2320      	movs	r3, #32
 8004b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b8c:	2330      	movs	r3, #48	; 0x30
 8004b8e:	f04f 0901 	mov.w	r9, #1
 8004b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d3c <_svfiprintf_r+0x1ec>
 8004b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	469a      	mov	sl, r3
 8004ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba6:	b10a      	cbz	r2, 8004bac <_svfiprintf_r+0x5c>
 8004ba8:	2a25      	cmp	r2, #37	; 0x25
 8004baa:	d1f9      	bne.n	8004ba0 <_svfiprintf_r+0x50>
 8004bac:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb0:	d00b      	beq.n	8004bca <_svfiprintf_r+0x7a>
 8004bb2:	465b      	mov	r3, fp
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff ff6d 	bl	8004a98 <__ssputs_r>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f000 80aa 	beq.w	8004d18 <_svfiprintf_r+0x1c8>
 8004bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc6:	445a      	add	r2, fp
 8004bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8004bca:	f89a 3000 	ldrb.w	r3, [sl]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a2 	beq.w	8004d18 <_svfiprintf_r+0x1c8>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bde:	f10a 0a01 	add.w	sl, sl, #1
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	9307      	str	r3, [sp, #28]
 8004be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bea:	931a      	str	r3, [sp, #104]	; 0x68
 8004bec:	4654      	mov	r4, sl
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf4:	4851      	ldr	r0, [pc, #324]	; (8004d3c <_svfiprintf_r+0x1ec>)
 8004bf6:	f000 fa41 	bl	800507c <memchr>
 8004bfa:	9a04      	ldr	r2, [sp, #16]
 8004bfc:	b9d8      	cbnz	r0, 8004c36 <_svfiprintf_r+0xe6>
 8004bfe:	06d0      	lsls	r0, r2, #27
 8004c00:	bf44      	itt	mi
 8004c02:	2320      	movmi	r3, #32
 8004c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c08:	0711      	lsls	r1, r2, #28
 8004c0a:	bf44      	itt	mi
 8004c0c:	232b      	movmi	r3, #43	; 0x2b
 8004c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c12:	f89a 3000 	ldrb.w	r3, [sl]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d015      	beq.n	8004c46 <_svfiprintf_r+0xf6>
 8004c1a:	4654      	mov	r4, sl
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f04f 0c0a 	mov.w	ip, #10
 8004c22:	9a07      	ldr	r2, [sp, #28]
 8004c24:	4621      	mov	r1, r4
 8004c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c2a:	3b30      	subs	r3, #48	; 0x30
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d94e      	bls.n	8004cce <_svfiprintf_r+0x17e>
 8004c30:	b1b0      	cbz	r0, 8004c60 <_svfiprintf_r+0x110>
 8004c32:	9207      	str	r2, [sp, #28]
 8004c34:	e014      	b.n	8004c60 <_svfiprintf_r+0x110>
 8004c36:	eba0 0308 	sub.w	r3, r0, r8
 8004c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	46a2      	mov	sl, r4
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	e7d2      	b.n	8004bec <_svfiprintf_r+0x9c>
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	1d19      	adds	r1, r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	9103      	str	r1, [sp, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bfbb      	ittet	lt
 8004c52:	425b      	neglt	r3, r3
 8004c54:	f042 0202 	orrlt.w	r2, r2, #2
 8004c58:	9307      	strge	r3, [sp, #28]
 8004c5a:	9307      	strlt	r3, [sp, #28]
 8004c5c:	bfb8      	it	lt
 8004c5e:	9204      	strlt	r2, [sp, #16]
 8004c60:	7823      	ldrb	r3, [r4, #0]
 8004c62:	2b2e      	cmp	r3, #46	; 0x2e
 8004c64:	d10c      	bne.n	8004c80 <_svfiprintf_r+0x130>
 8004c66:	7863      	ldrb	r3, [r4, #1]
 8004c68:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6a:	d135      	bne.n	8004cd8 <_svfiprintf_r+0x188>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	3402      	adds	r4, #2
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9203      	str	r2, [sp, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d4c <_svfiprintf_r+0x1fc>
 8004c84:	2203      	movs	r2, #3
 8004c86:	4650      	mov	r0, sl
 8004c88:	7821      	ldrb	r1, [r4, #0]
 8004c8a:	f000 f9f7 	bl	800507c <memchr>
 8004c8e:	b140      	cbz	r0, 8004ca2 <_svfiprintf_r+0x152>
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	eba0 000a 	sub.w	r0, r0, sl
 8004c96:	fa03 f000 	lsl.w	r0, r3, r0
 8004c9a:	9b04      	ldr	r3, [sp, #16]
 8004c9c:	3401      	adds	r4, #1
 8004c9e:	4303      	orrs	r3, r0
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	2206      	movs	r2, #6
 8004ca8:	4825      	ldr	r0, [pc, #148]	; (8004d40 <_svfiprintf_r+0x1f0>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cae:	f000 f9e5 	bl	800507c <memchr>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d038      	beq.n	8004d28 <_svfiprintf_r+0x1d8>
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <_svfiprintf_r+0x1f4>)
 8004cb8:	bb1b      	cbnz	r3, 8004d02 <_svfiprintf_r+0x1b2>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc8:	4433      	add	r3, r6
 8004cca:	9309      	str	r3, [sp, #36]	; 0x24
 8004ccc:	e767      	b.n	8004b9e <_svfiprintf_r+0x4e>
 8004cce:	460c      	mov	r4, r1
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd6:	e7a5      	b.n	8004c24 <_svfiprintf_r+0xd4>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	4619      	mov	r1, r3
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9305      	str	r3, [sp, #20]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cea:	3a30      	subs	r2, #48	; 0x30
 8004cec:	2a09      	cmp	r2, #9
 8004cee:	d903      	bls.n	8004cf8 <_svfiprintf_r+0x1a8>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0c5      	beq.n	8004c80 <_svfiprintf_r+0x130>
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	e7c3      	b.n	8004c80 <_svfiprintf_r+0x130>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d00:	e7f0      	b.n	8004ce4 <_svfiprintf_r+0x194>
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <_svfiprintf_r+0x1f8>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	f3af 8000 	nop.w
 8004d12:	1c42      	adds	r2, r0, #1
 8004d14:	4606      	mov	r6, r0
 8004d16:	d1d6      	bne.n	8004cc6 <_svfiprintf_r+0x176>
 8004d18:	89ab      	ldrh	r3, [r5, #12]
 8004d1a:	065b      	lsls	r3, r3, #25
 8004d1c:	f53f af2c 	bmi.w	8004b78 <_svfiprintf_r+0x28>
 8004d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d22:	b01d      	add	sp, #116	; 0x74
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d28:	ab03      	add	r3, sp, #12
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <_svfiprintf_r+0x1f8>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	f000 f87c 	bl	8004e30 <_printf_i>
 8004d38:	e7eb      	b.n	8004d12 <_svfiprintf_r+0x1c2>
 8004d3a:	bf00      	nop
 8004d3c:	08005318 	.word	0x08005318
 8004d40:	08005322 	.word	0x08005322
 8004d44:	00000000 	.word	0x00000000
 8004d48:	08004a99 	.word	0x08004a99
 8004d4c:	0800531e 	.word	0x0800531e

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4699      	mov	r9, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfb8      	it	lt
 8004d62:	4613      	movlt	r3, r2
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc28      	bgt.n	8004dea <_printf_common+0x9a>
 8004d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d9c:	1e13      	subs	r3, r2, #0
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42d      	bmi.n	8004e04 <_printf_common+0xb4>
 8004da8:	4649      	mov	r1, r9
 8004daa:	4638      	mov	r0, r7
 8004dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db0:	47c0      	blx	r8
 8004db2:	3001      	adds	r0, #1
 8004db4:	d020      	beq.n	8004df8 <_printf_common+0xa8>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	68e5      	ldr	r5, [r4, #12]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf18      	it	ne
 8004dc2:	2500      	movne	r5, #0
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	f04f 0600 	mov.w	r6, #0
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	bf08      	it	eq
 8004dce:	1aad      	subeq	r5, r5, r2
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	bf08      	it	eq
 8004dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bfc4      	itt	gt
 8004ddc:	1a9b      	subgt	r3, r3, r2
 8004dde:	18ed      	addgt	r5, r5, r3
 8004de0:	341a      	adds	r4, #26
 8004de2:	42b5      	cmp	r5, r6
 8004de4:	d11a      	bne.n	8004e1c <_printf_common+0xcc>
 8004de6:	2000      	movs	r0, #0
 8004de8:	e008      	b.n	8004dfc <_printf_common+0xac>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4652      	mov	r2, sl
 8004dee:	4649      	mov	r1, r9
 8004df0:	4638      	mov	r0, r7
 8004df2:	47c0      	blx	r8
 8004df4:	3001      	adds	r0, #1
 8004df6:	d103      	bne.n	8004e00 <_printf_common+0xb0>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e00:	3501      	adds	r5, #1
 8004e02:	e7c4      	b.n	8004d8e <_printf_common+0x3e>
 8004e04:	2030      	movs	r0, #48	; 0x30
 8004e06:	18e1      	adds	r1, r4, r3
 8004e08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e12:	4422      	add	r2, r4
 8004e14:	3302      	adds	r3, #2
 8004e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e1a:	e7c5      	b.n	8004da8 <_printf_common+0x58>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4622      	mov	r2, r4
 8004e20:	4649      	mov	r1, r9
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d0e6      	beq.n	8004df8 <_printf_common+0xa8>
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7d9      	b.n	8004de2 <_printf_common+0x92>
	...

08004e30 <_printf_i>:
 8004e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	460c      	mov	r4, r1
 8004e36:	7e27      	ldrb	r7, [r4, #24]
 8004e38:	4691      	mov	r9, r2
 8004e3a:	2f78      	cmp	r7, #120	; 0x78
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	469a      	mov	sl, r3
 8004e40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e46:	d807      	bhi.n	8004e58 <_printf_i+0x28>
 8004e48:	2f62      	cmp	r7, #98	; 0x62
 8004e4a:	d80a      	bhi.n	8004e62 <_printf_i+0x32>
 8004e4c:	2f00      	cmp	r7, #0
 8004e4e:	f000 80d9 	beq.w	8005004 <_printf_i+0x1d4>
 8004e52:	2f58      	cmp	r7, #88	; 0x58
 8004e54:	f000 80a4 	beq.w	8004fa0 <_printf_i+0x170>
 8004e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e60:	e03a      	b.n	8004ed8 <_printf_i+0xa8>
 8004e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e66:	2b15      	cmp	r3, #21
 8004e68:	d8f6      	bhi.n	8004e58 <_printf_i+0x28>
 8004e6a:	a001      	add	r0, pc, #4	; (adr r0, 8004e70 <_printf_i+0x40>)
 8004e6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e70:	08004ec9 	.word	0x08004ec9
 8004e74:	08004edd 	.word	0x08004edd
 8004e78:	08004e59 	.word	0x08004e59
 8004e7c:	08004e59 	.word	0x08004e59
 8004e80:	08004e59 	.word	0x08004e59
 8004e84:	08004e59 	.word	0x08004e59
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e59 	.word	0x08004e59
 8004e90:	08004e59 	.word	0x08004e59
 8004e94:	08004e59 	.word	0x08004e59
 8004e98:	08004e59 	.word	0x08004e59
 8004e9c:	08004feb 	.word	0x08004feb
 8004ea0:	08004f0d 	.word	0x08004f0d
 8004ea4:	08004fcd 	.word	0x08004fcd
 8004ea8:	08004e59 	.word	0x08004e59
 8004eac:	08004e59 	.word	0x08004e59
 8004eb0:	0800500d 	.word	0x0800500d
 8004eb4:	08004e59 	.word	0x08004e59
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e59 	.word	0x08004e59
 8004ec0:	08004e59 	.word	0x08004e59
 8004ec4:	08004fd5 	.word	0x08004fd5
 8004ec8:	680b      	ldr	r3, [r1, #0]
 8004eca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	600a      	str	r2, [r1, #0]
 8004ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0a4      	b.n	8005026 <_printf_i+0x1f6>
 8004edc:	6825      	ldr	r5, [r4, #0]
 8004ede:	6808      	ldr	r0, [r1, #0]
 8004ee0:	062e      	lsls	r6, r5, #24
 8004ee2:	f100 0304 	add.w	r3, r0, #4
 8004ee6:	d50a      	bpl.n	8004efe <_printf_i+0xce>
 8004ee8:	6805      	ldr	r5, [r0, #0]
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	da03      	bge.n	8004ef8 <_printf_i+0xc8>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	426d      	negs	r5, r5
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	230a      	movs	r3, #10
 8004efa:	485e      	ldr	r0, [pc, #376]	; (8005074 <_printf_i+0x244>)
 8004efc:	e019      	b.n	8004f32 <_printf_i+0x102>
 8004efe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f02:	6805      	ldr	r5, [r0, #0]
 8004f04:	600b      	str	r3, [r1, #0]
 8004f06:	bf18      	it	ne
 8004f08:	b22d      	sxthne	r5, r5
 8004f0a:	e7ef      	b.n	8004eec <_printf_i+0xbc>
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	1d18      	adds	r0, r3, #4
 8004f12:	6008      	str	r0, [r1, #0]
 8004f14:	0628      	lsls	r0, r5, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xec>
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <_printf_i+0xf2>
 8004f1c:	0669      	lsls	r1, r5, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xe8>
 8004f20:	881d      	ldrh	r5, [r3, #0]
 8004f22:	2f6f      	cmp	r7, #111	; 0x6f
 8004f24:	bf0c      	ite	eq
 8004f26:	2308      	moveq	r3, #8
 8004f28:	230a      	movne	r3, #10
 8004f2a:	4852      	ldr	r0, [pc, #328]	; (8005074 <_printf_i+0x244>)
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f32:	6866      	ldr	r6, [r4, #4]
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	bfa8      	it	ge
 8004f38:	6821      	ldrge	r1, [r4, #0]
 8004f3a:	60a6      	str	r6, [r4, #8]
 8004f3c:	bfa4      	itt	ge
 8004f3e:	f021 0104 	bicge.w	r1, r1, #4
 8004f42:	6021      	strge	r1, [r4, #0]
 8004f44:	b90d      	cbnz	r5, 8004f4a <_printf_i+0x11a>
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	d04d      	beq.n	8004fe6 <_printf_i+0x1b6>
 8004f4a:	4616      	mov	r6, r2
 8004f4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f50:	fb03 5711 	mls	r7, r3, r1, r5
 8004f54:	5dc7      	ldrb	r7, [r0, r7]
 8004f56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f5a:	462f      	mov	r7, r5
 8004f5c:	42bb      	cmp	r3, r7
 8004f5e:	460d      	mov	r5, r1
 8004f60:	d9f4      	bls.n	8004f4c <_printf_i+0x11c>
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d10b      	bne.n	8004f7e <_printf_i+0x14e>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	07df      	lsls	r7, r3, #31
 8004f6a:	d508      	bpl.n	8004f7e <_printf_i+0x14e>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	4299      	cmp	r1, r3
 8004f72:	bfde      	ittt	le
 8004f74:	2330      	movle	r3, #48	; 0x30
 8004f76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f7e:	1b92      	subs	r2, r2, r6
 8004f80:	6122      	str	r2, [r4, #16]
 8004f82:	464b      	mov	r3, r9
 8004f84:	4621      	mov	r1, r4
 8004f86:	4640      	mov	r0, r8
 8004f88:	f8cd a000 	str.w	sl, [sp]
 8004f8c:	aa03      	add	r2, sp, #12
 8004f8e:	f7ff fedf 	bl	8004d50 <_printf_common>
 8004f92:	3001      	adds	r0, #1
 8004f94:	d14c      	bne.n	8005030 <_printf_i+0x200>
 8004f96:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9a:	b004      	add	sp, #16
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	4834      	ldr	r0, [pc, #208]	; (8005074 <_printf_i+0x244>)
 8004fa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fa6:	680e      	ldr	r6, [r1, #0]
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fae:	061f      	lsls	r7, r3, #24
 8004fb0:	600e      	str	r6, [r1, #0]
 8004fb2:	d514      	bpl.n	8004fde <_printf_i+0x1ae>
 8004fb4:	07d9      	lsls	r1, r3, #31
 8004fb6:	bf44      	itt	mi
 8004fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbc:	6023      	strmi	r3, [r4, #0]
 8004fbe:	b91d      	cbnz	r5, 8004fc8 <_printf_i+0x198>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	2310      	movs	r3, #16
 8004fca:	e7af      	b.n	8004f2c <_printf_i+0xfc>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	f043 0320 	orr.w	r3, r3, #32
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	2378      	movs	r3, #120	; 0x78
 8004fd6:	4828      	ldr	r0, [pc, #160]	; (8005078 <_printf_i+0x248>)
 8004fd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fdc:	e7e3      	b.n	8004fa6 <_printf_i+0x176>
 8004fde:	065e      	lsls	r6, r3, #25
 8004fe0:	bf48      	it	mi
 8004fe2:	b2ad      	uxthmi	r5, r5
 8004fe4:	e7e6      	b.n	8004fb4 <_printf_i+0x184>
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	e7bb      	b.n	8004f62 <_printf_i+0x132>
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	6826      	ldr	r6, [r4, #0]
 8004fee:	1d1d      	adds	r5, r3, #4
 8004ff0:	6960      	ldr	r0, [r4, #20]
 8004ff2:	600d      	str	r5, [r1, #0]
 8004ff4:	0635      	lsls	r5, r6, #24
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	d501      	bpl.n	8004ffe <_printf_i+0x1ce>
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	e002      	b.n	8005004 <_printf_i+0x1d4>
 8004ffe:	0671      	lsls	r1, r6, #25
 8005000:	d5fb      	bpl.n	8004ffa <_printf_i+0x1ca>
 8005002:	8018      	strh	r0, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	4616      	mov	r6, r2
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	e7ba      	b.n	8004f82 <_printf_i+0x152>
 800500c:	680b      	ldr	r3, [r1, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	600a      	str	r2, [r1, #0]
 8005012:	681e      	ldr	r6, [r3, #0]
 8005014:	2100      	movs	r1, #0
 8005016:	4630      	mov	r0, r6
 8005018:	6862      	ldr	r2, [r4, #4]
 800501a:	f000 f82f 	bl	800507c <memchr>
 800501e:	b108      	cbz	r0, 8005024 <_printf_i+0x1f4>
 8005020:	1b80      	subs	r0, r0, r6
 8005022:	6060      	str	r0, [r4, #4]
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2300      	movs	r3, #0
 800502a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502e:	e7a8      	b.n	8004f82 <_printf_i+0x152>
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	47d0      	blx	sl
 800503a:	3001      	adds	r0, #1
 800503c:	d0ab      	beq.n	8004f96 <_printf_i+0x166>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	079b      	lsls	r3, r3, #30
 8005042:	d413      	bmi.n	800506c <_printf_i+0x23c>
 8005044:	68e0      	ldr	r0, [r4, #12]
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	4298      	cmp	r0, r3
 800504a:	bfb8      	it	lt
 800504c:	4618      	movlt	r0, r3
 800504e:	e7a4      	b.n	8004f9a <_printf_i+0x16a>
 8005050:	2301      	movs	r3, #1
 8005052:	4632      	mov	r2, r6
 8005054:	4649      	mov	r1, r9
 8005056:	4640      	mov	r0, r8
 8005058:	47d0      	blx	sl
 800505a:	3001      	adds	r0, #1
 800505c:	d09b      	beq.n	8004f96 <_printf_i+0x166>
 800505e:	3501      	adds	r5, #1
 8005060:	68e3      	ldr	r3, [r4, #12]
 8005062:	9903      	ldr	r1, [sp, #12]
 8005064:	1a5b      	subs	r3, r3, r1
 8005066:	42ab      	cmp	r3, r5
 8005068:	dcf2      	bgt.n	8005050 <_printf_i+0x220>
 800506a:	e7eb      	b.n	8005044 <_printf_i+0x214>
 800506c:	2500      	movs	r5, #0
 800506e:	f104 0619 	add.w	r6, r4, #25
 8005072:	e7f5      	b.n	8005060 <_printf_i+0x230>
 8005074:	08005329 	.word	0x08005329
 8005078:	0800533a 	.word	0x0800533a

0800507c <memchr>:
 800507c:	4603      	mov	r3, r0
 800507e:	b510      	push	{r4, lr}
 8005080:	b2c9      	uxtb	r1, r1
 8005082:	4402      	add	r2, r0
 8005084:	4293      	cmp	r3, r2
 8005086:	4618      	mov	r0, r3
 8005088:	d101      	bne.n	800508e <memchr+0x12>
 800508a:	2000      	movs	r0, #0
 800508c:	e003      	b.n	8005096 <memchr+0x1a>
 800508e:	7804      	ldrb	r4, [r0, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	428c      	cmp	r4, r1
 8005094:	d1f6      	bne.n	8005084 <memchr+0x8>
 8005096:	bd10      	pop	{r4, pc}

08005098 <memcpy>:
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a0:	d100      	bne.n	80050a4 <memcpy+0xc>
 80050a2:	4770      	bx	lr
 80050a4:	b510      	push	{r4, lr}
 80050a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050aa:	4291      	cmp	r1, r2
 80050ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b0:	d1f9      	bne.n	80050a6 <memcpy+0xe>
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <memmove>:
 80050b4:	4288      	cmp	r0, r1
 80050b6:	b510      	push	{r4, lr}
 80050b8:	eb01 0402 	add.w	r4, r1, r2
 80050bc:	d902      	bls.n	80050c4 <memmove+0x10>
 80050be:	4284      	cmp	r4, r0
 80050c0:	4623      	mov	r3, r4
 80050c2:	d807      	bhi.n	80050d4 <memmove+0x20>
 80050c4:	1e43      	subs	r3, r0, #1
 80050c6:	42a1      	cmp	r1, r4
 80050c8:	d008      	beq.n	80050dc <memmove+0x28>
 80050ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d2:	e7f8      	b.n	80050c6 <memmove+0x12>
 80050d4:	4601      	mov	r1, r0
 80050d6:	4402      	add	r2, r0
 80050d8:	428a      	cmp	r2, r1
 80050da:	d100      	bne.n	80050de <memmove+0x2a>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050e6:	e7f7      	b.n	80050d8 <memmove+0x24>

080050e8 <_free_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4605      	mov	r5, r0
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d043      	beq.n	8005178 <_free_r+0x90>
 80050f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f4:	1f0c      	subs	r4, r1, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bfb8      	it	lt
 80050fa:	18e4      	addlt	r4, r4, r3
 80050fc:	f000 f8d0 	bl	80052a0 <__malloc_lock>
 8005100:	4a1e      	ldr	r2, [pc, #120]	; (800517c <_free_r+0x94>)
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	4610      	mov	r0, r2
 8005106:	b933      	cbnz	r3, 8005116 <_free_r+0x2e>
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	6014      	str	r4, [r2, #0]
 800510c:	4628      	mov	r0, r5
 800510e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005112:	f000 b8cb 	b.w	80052ac <__malloc_unlock>
 8005116:	42a3      	cmp	r3, r4
 8005118:	d90a      	bls.n	8005130 <_free_r+0x48>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	1862      	adds	r2, r4, r1
 800511e:	4293      	cmp	r3, r2
 8005120:	bf01      	itttt	eq
 8005122:	681a      	ldreq	r2, [r3, #0]
 8005124:	685b      	ldreq	r3, [r3, #4]
 8005126:	1852      	addeq	r2, r2, r1
 8005128:	6022      	streq	r2, [r4, #0]
 800512a:	6063      	str	r3, [r4, #4]
 800512c:	6004      	str	r4, [r0, #0]
 800512e:	e7ed      	b.n	800510c <_free_r+0x24>
 8005130:	461a      	mov	r2, r3
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b10b      	cbz	r3, 800513a <_free_r+0x52>
 8005136:	42a3      	cmp	r3, r4
 8005138:	d9fa      	bls.n	8005130 <_free_r+0x48>
 800513a:	6811      	ldr	r1, [r2, #0]
 800513c:	1850      	adds	r0, r2, r1
 800513e:	42a0      	cmp	r0, r4
 8005140:	d10b      	bne.n	800515a <_free_r+0x72>
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	4401      	add	r1, r0
 8005146:	1850      	adds	r0, r2, r1
 8005148:	4283      	cmp	r3, r0
 800514a:	6011      	str	r1, [r2, #0]
 800514c:	d1de      	bne.n	800510c <_free_r+0x24>
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4401      	add	r1, r0
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	6053      	str	r3, [r2, #4]
 8005158:	e7d8      	b.n	800510c <_free_r+0x24>
 800515a:	d902      	bls.n	8005162 <_free_r+0x7a>
 800515c:	230c      	movs	r3, #12
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	e7d4      	b.n	800510c <_free_r+0x24>
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	1821      	adds	r1, r4, r0
 8005166:	428b      	cmp	r3, r1
 8005168:	bf01      	itttt	eq
 800516a:	6819      	ldreq	r1, [r3, #0]
 800516c:	685b      	ldreq	r3, [r3, #4]
 800516e:	1809      	addeq	r1, r1, r0
 8005170:	6021      	streq	r1, [r4, #0]
 8005172:	6063      	str	r3, [r4, #4]
 8005174:	6054      	str	r4, [r2, #4]
 8005176:	e7c9      	b.n	800510c <_free_r+0x24>
 8005178:	bd38      	pop	{r3, r4, r5, pc}
 800517a:	bf00      	nop
 800517c:	200000fc 	.word	0x200000fc

08005180 <_malloc_r>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	1ccd      	adds	r5, r1, #3
 8005184:	f025 0503 	bic.w	r5, r5, #3
 8005188:	3508      	adds	r5, #8
 800518a:	2d0c      	cmp	r5, #12
 800518c:	bf38      	it	cc
 800518e:	250c      	movcc	r5, #12
 8005190:	2d00      	cmp	r5, #0
 8005192:	4606      	mov	r6, r0
 8005194:	db01      	blt.n	800519a <_malloc_r+0x1a>
 8005196:	42a9      	cmp	r1, r5
 8005198:	d903      	bls.n	80051a2 <_malloc_r+0x22>
 800519a:	230c      	movs	r3, #12
 800519c:	6033      	str	r3, [r6, #0]
 800519e:	2000      	movs	r0, #0
 80051a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a2:	f000 f87d 	bl	80052a0 <__malloc_lock>
 80051a6:	4921      	ldr	r1, [pc, #132]	; (800522c <_malloc_r+0xac>)
 80051a8:	680a      	ldr	r2, [r1, #0]
 80051aa:	4614      	mov	r4, r2
 80051ac:	b99c      	cbnz	r4, 80051d6 <_malloc_r+0x56>
 80051ae:	4f20      	ldr	r7, [pc, #128]	; (8005230 <_malloc_r+0xb0>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b923      	cbnz	r3, 80051be <_malloc_r+0x3e>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f862 	bl	8005280 <_sbrk_r>
 80051bc:	6038      	str	r0, [r7, #0]
 80051be:	4629      	mov	r1, r5
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f85d 	bl	8005280 <_sbrk_r>
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	d123      	bne.n	8005212 <_malloc_r+0x92>
 80051ca:	230c      	movs	r3, #12
 80051cc:	4630      	mov	r0, r6
 80051ce:	6033      	str	r3, [r6, #0]
 80051d0:	f000 f86c 	bl	80052ac <__malloc_unlock>
 80051d4:	e7e3      	b.n	800519e <_malloc_r+0x1e>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	1b5b      	subs	r3, r3, r5
 80051da:	d417      	bmi.n	800520c <_malloc_r+0x8c>
 80051dc:	2b0b      	cmp	r3, #11
 80051de:	d903      	bls.n	80051e8 <_malloc_r+0x68>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	441c      	add	r4, r3
 80051e4:	6025      	str	r5, [r4, #0]
 80051e6:	e004      	b.n	80051f2 <_malloc_r+0x72>
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	42a2      	cmp	r2, r4
 80051ec:	bf0c      	ite	eq
 80051ee:	600b      	streq	r3, [r1, #0]
 80051f0:	6053      	strne	r3, [r2, #4]
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f85a 	bl	80052ac <__malloc_unlock>
 80051f8:	f104 000b 	add.w	r0, r4, #11
 80051fc:	1d23      	adds	r3, r4, #4
 80051fe:	f020 0007 	bic.w	r0, r0, #7
 8005202:	1ac2      	subs	r2, r0, r3
 8005204:	d0cc      	beq.n	80051a0 <_malloc_r+0x20>
 8005206:	1a1b      	subs	r3, r3, r0
 8005208:	50a3      	str	r3, [r4, r2]
 800520a:	e7c9      	b.n	80051a0 <_malloc_r+0x20>
 800520c:	4622      	mov	r2, r4
 800520e:	6864      	ldr	r4, [r4, #4]
 8005210:	e7cc      	b.n	80051ac <_malloc_r+0x2c>
 8005212:	1cc4      	adds	r4, r0, #3
 8005214:	f024 0403 	bic.w	r4, r4, #3
 8005218:	42a0      	cmp	r0, r4
 800521a:	d0e3      	beq.n	80051e4 <_malloc_r+0x64>
 800521c:	1a21      	subs	r1, r4, r0
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f82e 	bl	8005280 <_sbrk_r>
 8005224:	3001      	adds	r0, #1
 8005226:	d1dd      	bne.n	80051e4 <_malloc_r+0x64>
 8005228:	e7cf      	b.n	80051ca <_malloc_r+0x4a>
 800522a:	bf00      	nop
 800522c:	200000fc 	.word	0x200000fc
 8005230:	20000100 	.word	0x20000100

08005234 <_realloc_r>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4607      	mov	r7, r0
 8005238:	4614      	mov	r4, r2
 800523a:	460e      	mov	r6, r1
 800523c:	b921      	cbnz	r1, 8005248 <_realloc_r+0x14>
 800523e:	4611      	mov	r1, r2
 8005240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005244:	f7ff bf9c 	b.w	8005180 <_malloc_r>
 8005248:	b922      	cbnz	r2, 8005254 <_realloc_r+0x20>
 800524a:	f7ff ff4d 	bl	80050e8 <_free_r>
 800524e:	4625      	mov	r5, r4
 8005250:	4628      	mov	r0, r5
 8005252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005254:	f000 f830 	bl	80052b8 <_malloc_usable_size_r>
 8005258:	42a0      	cmp	r0, r4
 800525a:	d20f      	bcs.n	800527c <_realloc_r+0x48>
 800525c:	4621      	mov	r1, r4
 800525e:	4638      	mov	r0, r7
 8005260:	f7ff ff8e 	bl	8005180 <_malloc_r>
 8005264:	4605      	mov	r5, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	d0f2      	beq.n	8005250 <_realloc_r+0x1c>
 800526a:	4631      	mov	r1, r6
 800526c:	4622      	mov	r2, r4
 800526e:	f7ff ff13 	bl	8005098 <memcpy>
 8005272:	4631      	mov	r1, r6
 8005274:	4638      	mov	r0, r7
 8005276:	f7ff ff37 	bl	80050e8 <_free_r>
 800527a:	e7e9      	b.n	8005250 <_realloc_r+0x1c>
 800527c:	4635      	mov	r5, r6
 800527e:	e7e7      	b.n	8005250 <_realloc_r+0x1c>

08005280 <_sbrk_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	2300      	movs	r3, #0
 8005284:	4d05      	ldr	r5, [pc, #20]	; (800529c <_sbrk_r+0x1c>)
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	f7fc fecc 	bl	8002028 <_sbrk>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d102      	bne.n	800529a <_sbrk_r+0x1a>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b103      	cbz	r3, 800529a <_sbrk_r+0x1a>
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	20000270 	.word	0x20000270

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_lock+0x8>)
 80052a2:	f000 b811 	b.w	80052c8 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000278 	.word	0x20000278

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f000 b80c 	b.w	80052ca <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000278 	.word	0x20000278

080052b8 <_malloc_usable_size_r>:
 80052b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052bc:	1f18      	subs	r0, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfbc      	itt	lt
 80052c2:	580b      	ldrlt	r3, [r1, r0]
 80052c4:	18c0      	addlt	r0, r0, r3
 80052c6:	4770      	bx	lr

080052c8 <__retarget_lock_acquire_recursive>:
 80052c8:	4770      	bx	lr

080052ca <__retarget_lock_release_recursive>:
 80052ca:	4770      	bx	lr

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
